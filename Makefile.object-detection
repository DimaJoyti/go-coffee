# Object Detection Service Makefile

# Variables
SERVICE_NAME := object-detection-service
BINARY_NAME := $(SERVICE_NAME)
DOCKER_IMAGE := go-coffee/$(SERVICE_NAME)
DOCKER_TAG := latest

# Go variables
GO_VERSION := 1.24
GOCMD := go
GOBUILD := $(GOCMD) build
GOCLEAN := $(GOCMD) clean
GOTEST := $(GOCMD) test
GOGET := $(GOCMD) get
GOMOD := $(GOCMD) mod
GOFMT := gofmt
GOLINT := golangci-lint

# Directories
BUILD_DIR := ./bin
CMD_DIR := ./cmd/$(SERVICE_NAME)
INTERNAL_DIR := ./internal/object-detection
CONFIG_DIR := ./configs

# Build flags
LDFLAGS := -ldflags "-X main.version=$(shell git describe --tags --always --dirty) -X main.buildTime=$(shell date -u +%Y-%m-%dT%H:%M:%SZ)"
BUILD_FLAGS := -v $(LDFLAGS)

# Test flags
TEST_FLAGS := -v -race -coverprofile=coverage.out
INTEGRATION_TEST_FLAGS := -v -tags=integration

.PHONY: all build clean test test-unit test-integration test-coverage lint fmt vet deps docker-build docker-run docker-push help

# Default target
all: clean deps fmt vet lint test build

# Build the binary
build:
	@echo "Building $(SERVICE_NAME)..."
	@mkdir -p $(BUILD_DIR)
	$(GOBUILD) $(BUILD_FLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) $(CMD_DIR)
	@echo "Binary built: $(BUILD_DIR)/$(BINARY_NAME)"

# Clean build artifacts
clean:
	@echo "Cleaning..."
	$(GOCLEAN)
	@rm -rf $(BUILD_DIR)
	@rm -f coverage.out
	@rm -f coverage.html

# Run tests
test: test-unit

# Run unit tests
test-unit:
	@echo "Running unit tests..."
	$(GOTEST) $(TEST_FLAGS) ./$(INTERNAL_DIR)/...

# Run integration tests
test-integration:
	@echo "Running integration tests..."
	$(GOTEST) $(INTEGRATION_TEST_FLAGS) ./$(INTERNAL_DIR)/...

# Generate test coverage report
test-coverage: test-unit
	@echo "Generating coverage report..."
	$(GOCMD) tool cover -html=coverage.out -o coverage.html
	@echo "Coverage report generated: coverage.html"

# Run linter
lint:
	@echo "Running linter..."
	$(GOLINT) run ./$(INTERNAL_DIR)/...

# Format code
fmt:
	@echo "Formatting code..."
	$(GOFMT) -s -w $(CMD_DIR)
	$(GOFMT) -s -w $(INTERNAL_DIR)

# Run go vet
vet:
	@echo "Running go vet..."
	$(GOCMD) vet ./$(INTERNAL_DIR)/...
	$(GOCMD) vet $(CMD_DIR)

# Download dependencies
deps:
	@echo "Downloading dependencies..."
	$(GOMOD) download
	$(GOMOD) tidy

# Run the service locally
run: build
	@echo "Running $(SERVICE_NAME)..."
	./$(BUILD_DIR)/$(BINARY_NAME)

# Run the service with development config
run-dev: build
	@echo "Running $(SERVICE_NAME) in development mode..."
	ENVIRONMENT=development ./$(BUILD_DIR)/$(BINARY_NAME)

# Build Docker image
docker-build:
	@echo "Building Docker image..."
	docker build -t $(DOCKER_IMAGE):$(DOCKER_TAG) -f docker/Dockerfile.object-detection .

# Run Docker container
docker-run: docker-build
	@echo "Running Docker container..."
	docker run --rm -p 8080:8080 \
		-e ENVIRONMENT=development \
		-e DB_HOST=host.docker.internal \
		-e REDIS_HOST=host.docker.internal \
		$(DOCKER_IMAGE):$(DOCKER_TAG)

# Push Docker image
docker-push: docker-build
	@echo "Pushing Docker image..."
	docker push $(DOCKER_IMAGE):$(DOCKER_TAG)

# Install development tools
install-tools:
	@echo "Installing development tools..."
	$(GOGET) github.com/golangci/golangci-lint/cmd/golangci-lint@latest

# Generate mocks (when we add interfaces)
generate-mocks:
	@echo "Generating mocks..."
	$(GOCMD) generate ./$(INTERNAL_DIR)/...

# Run benchmarks
benchmark:
	@echo "Running benchmarks..."
	$(GOTEST) -bench=. -benchmem ./$(INTERNAL_DIR)/...

# Check for security vulnerabilities
security-check:
	@echo "Running security check..."
	$(GOCMD) list -json -m all | nancy sleuth

# Create database migration (placeholder)
migrate-create:
	@echo "Creating database migration..."
	@echo "TODO: Implement database migration creation"

# Run database migrations (placeholder)
migrate-up:
	@echo "Running database migrations..."
	@echo "TODO: Implement database migration execution"

# Rollback database migrations (placeholder)
migrate-down:
	@echo "Rolling back database migrations..."
	@echo "TODO: Implement database migration rollback"

# Start development environment with Docker Compose
dev-up:
	@echo "Starting development environment..."
	docker-compose -f docker/docker-compose.object-detection.yml up -d

# Stop development environment
dev-down:
	@echo "Stopping development environment..."
	docker-compose -f docker/docker-compose.object-detection.yml down

# View logs from development environment
dev-logs:
	@echo "Viewing development logs..."
	docker-compose -f docker/docker-compose.object-detection.yml logs -f

# Health check
health-check:
	@echo "Checking service health..."
	@curl -f http://localhost:8080/health || echo "Service is not healthy"

# Load test (placeholder)
load-test:
	@echo "Running load test..."
	@echo "TODO: Implement load testing"

# Performance profiling
profile:
	@echo "Running performance profiling..."
	$(GOTEST) -cpuprofile=cpu.prof -memprofile=mem.prof -bench=. ./$(INTERNAL_DIR)/...

# Show help
help:
	@echo "Available targets:"
	@echo "  all              - Run clean, deps, fmt, vet, lint, test, build"
	@echo "  build            - Build the binary"
	@echo "  clean            - Clean build artifacts"
	@echo "  test             - Run all tests"
	@echo "  test-unit        - Run unit tests"
	@echo "  test-integration - Run integration tests"
	@echo "  test-coverage    - Generate test coverage report"
	@echo "  lint             - Run linter"
	@echo "  fmt              - Format code"
	@echo "  vet              - Run go vet"
	@echo "  deps             - Download dependencies"
	@echo "  run              - Run the service locally"
	@echo "  run-dev          - Run the service in development mode"
	@echo "  docker-build     - Build Docker image"
	@echo "  docker-run       - Run Docker container"
	@echo "  docker-push      - Push Docker image"
	@echo "  install-tools    - Install development tools"
	@echo "  generate-mocks   - Generate mocks"
	@echo "  benchmark        - Run benchmarks"
	@echo "  security-check   - Check for security vulnerabilities"
	@echo "  dev-up           - Start development environment"
	@echo "  dev-down         - Stop development environment"
	@echo "  dev-logs         - View development logs"
	@echo "  health-check     - Check service health"
	@echo "  profile          - Run performance profiling"
	@echo "  help             - Show this help message"
