// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: arbitrage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArbitrageServiceClient is the client API for ArbitrageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArbitrageServiceClient interface {
	// Create arbitrage opportunity
	CreateOpportunity(ctx context.Context, in *CreateOpportunityRequest, opts ...grpc.CallOption) (*CreateOpportunityResponse, error)
	// Get arbitrage opportunities
	GetOpportunities(ctx context.Context, in *GetOpportunitiesRequest, opts ...grpc.CallOption) (*GetOpportunitiesResponse, error)
	// Match buyers and sellers
	MatchParticipants(ctx context.Context, in *MatchParticipantsRequest, opts ...grpc.CallOption) (*MatchParticipantsResponse, error)
	// Execute arbitrage trade
	ExecuteTrade(ctx context.Context, in *ExecuteTradeRequest, opts ...grpc.CallOption) (*ExecuteTradeResponse, error)
	// Get market analysis
	GetMarketAnalysis(ctx context.Context, in *GetMarketAnalysisRequest, opts ...grpc.CallOption) (*GetMarketAnalysisResponse, error)
	// Subscribe to real-time opportunities
	SubscribeToOpportunities(ctx context.Context, in *SubscribeOpportunitiesRequest, opts ...grpc.CallOption) (ArbitrageService_SubscribeToOpportunitiesClient, error)
	// Get participant profile
	GetParticipantProfile(ctx context.Context, in *GetParticipantProfileRequest, opts ...grpc.CallOption) (*GetParticipantProfileResponse, error)
	// Update participant preferences
	UpdateParticipantPreferences(ctx context.Context, in *UpdateParticipantPreferencesRequest, opts ...grpc.CallOption) (*UpdateParticipantPreferencesResponse, error)
}

type arbitrageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArbitrageServiceClient(cc grpc.ClientConnInterface) ArbitrageServiceClient {
	return &arbitrageServiceClient{cc}
}

func (c *arbitrageServiceClient) CreateOpportunity(ctx context.Context, in *CreateOpportunityRequest, opts ...grpc.CallOption) (*CreateOpportunityResponse, error) {
	out := new(CreateOpportunityResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.ArbitrageService/CreateOpportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arbitrageServiceClient) GetOpportunities(ctx context.Context, in *GetOpportunitiesRequest, opts ...grpc.CallOption) (*GetOpportunitiesResponse, error) {
	out := new(GetOpportunitiesResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.ArbitrageService/GetOpportunities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arbitrageServiceClient) MatchParticipants(ctx context.Context, in *MatchParticipantsRequest, opts ...grpc.CallOption) (*MatchParticipantsResponse, error) {
	out := new(MatchParticipantsResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.ArbitrageService/MatchParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arbitrageServiceClient) ExecuteTrade(ctx context.Context, in *ExecuteTradeRequest, opts ...grpc.CallOption) (*ExecuteTradeResponse, error) {
	out := new(ExecuteTradeResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.ArbitrageService/ExecuteTrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arbitrageServiceClient) GetMarketAnalysis(ctx context.Context, in *GetMarketAnalysisRequest, opts ...grpc.CallOption) (*GetMarketAnalysisResponse, error) {
	out := new(GetMarketAnalysisResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.ArbitrageService/GetMarketAnalysis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arbitrageServiceClient) SubscribeToOpportunities(ctx context.Context, in *SubscribeOpportunitiesRequest, opts ...grpc.CallOption) (ArbitrageService_SubscribeToOpportunitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArbitrageService_ServiceDesc.Streams[0], "/arbitrage.ArbitrageService/SubscribeToOpportunities", opts...)
	if err != nil {
		return nil, err
	}
	x := &arbitrageServiceSubscribeToOpportunitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArbitrageService_SubscribeToOpportunitiesClient interface {
	Recv() (*OpportunityEvent, error)
	grpc.ClientStream
}

type arbitrageServiceSubscribeToOpportunitiesClient struct {
	grpc.ClientStream
}

func (x *arbitrageServiceSubscribeToOpportunitiesClient) Recv() (*OpportunityEvent, error) {
	m := new(OpportunityEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *arbitrageServiceClient) GetParticipantProfile(ctx context.Context, in *GetParticipantProfileRequest, opts ...grpc.CallOption) (*GetParticipantProfileResponse, error) {
	out := new(GetParticipantProfileResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.ArbitrageService/GetParticipantProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arbitrageServiceClient) UpdateParticipantPreferences(ctx context.Context, in *UpdateParticipantPreferencesRequest, opts ...grpc.CallOption) (*UpdateParticipantPreferencesResponse, error) {
	out := new(UpdateParticipantPreferencesResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.ArbitrageService/UpdateParticipantPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArbitrageServiceServer is the server API for ArbitrageService service.
// All implementations must embed UnimplementedArbitrageServiceServer
// for forward compatibility
type ArbitrageServiceServer interface {
	// Create arbitrage opportunity
	CreateOpportunity(context.Context, *CreateOpportunityRequest) (*CreateOpportunityResponse, error)
	// Get arbitrage opportunities
	GetOpportunities(context.Context, *GetOpportunitiesRequest) (*GetOpportunitiesResponse, error)
	// Match buyers and sellers
	MatchParticipants(context.Context, *MatchParticipantsRequest) (*MatchParticipantsResponse, error)
	// Execute arbitrage trade
	ExecuteTrade(context.Context, *ExecuteTradeRequest) (*ExecuteTradeResponse, error)
	// Get market analysis
	GetMarketAnalysis(context.Context, *GetMarketAnalysisRequest) (*GetMarketAnalysisResponse, error)
	// Subscribe to real-time opportunities
	SubscribeToOpportunities(*SubscribeOpportunitiesRequest, ArbitrageService_SubscribeToOpportunitiesServer) error
	// Get participant profile
	GetParticipantProfile(context.Context, *GetParticipantProfileRequest) (*GetParticipantProfileResponse, error)
	// Update participant preferences
	UpdateParticipantPreferences(context.Context, *UpdateParticipantPreferencesRequest) (*UpdateParticipantPreferencesResponse, error)
	mustEmbedUnimplementedArbitrageServiceServer()
}

// UnimplementedArbitrageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArbitrageServiceServer struct {
}

func (UnimplementedArbitrageServiceServer) CreateOpportunity(context.Context, *CreateOpportunityRequest) (*CreateOpportunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpportunity not implemented")
}
func (UnimplementedArbitrageServiceServer) GetOpportunities(context.Context, *GetOpportunitiesRequest) (*GetOpportunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpportunities not implemented")
}
func (UnimplementedArbitrageServiceServer) MatchParticipants(context.Context, *MatchParticipantsRequest) (*MatchParticipantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchParticipants not implemented")
}
func (UnimplementedArbitrageServiceServer) ExecuteTrade(context.Context, *ExecuteTradeRequest) (*ExecuteTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTrade not implemented")
}
func (UnimplementedArbitrageServiceServer) GetMarketAnalysis(context.Context, *GetMarketAnalysisRequest) (*GetMarketAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketAnalysis not implemented")
}
func (UnimplementedArbitrageServiceServer) SubscribeToOpportunities(*SubscribeOpportunitiesRequest, ArbitrageService_SubscribeToOpportunitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToOpportunities not implemented")
}
func (UnimplementedArbitrageServiceServer) GetParticipantProfile(context.Context, *GetParticipantProfileRequest) (*GetParticipantProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParticipantProfile not implemented")
}
func (UnimplementedArbitrageServiceServer) UpdateParticipantPreferences(context.Context, *UpdateParticipantPreferencesRequest) (*UpdateParticipantPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParticipantPreferences not implemented")
}
func (UnimplementedArbitrageServiceServer) mustEmbedUnimplementedArbitrageServiceServer() {}

// ArbitrageService_SubscribeToOpportunitiesServer is the server API for ArbitrageService_SubscribeToOpportunities service.
type ArbitrageService_SubscribeToOpportunitiesServer interface {
	Send(*OpportunityEvent) error
	grpc.ServerStream
}

// UnsafeArbitrageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArbitrageServiceServer will
// result in compilation errors.
type UnsafeArbitrageServiceServer interface {
	mustEmbedUnimplementedArbitrageServiceServer()
}

func RegisterArbitrageServiceServer(s grpc.ServiceRegistrar, srv ArbitrageServiceServer) {
	s.RegisterService(&ArbitrageService_ServiceDesc, srv)
}

func _ArbitrageService_CreateOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).CreateOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.ArbitrageService/CreateOpportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).CreateOpportunity(ctx, req.(*CreateOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArbitrageService_GetOpportunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpportunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).GetOpportunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.ArbitrageService/GetOpportunities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).GetOpportunities(ctx, req.(*GetOpportunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArbitrageService_MatchParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchParticipantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).MatchParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.ArbitrageService/MatchParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).MatchParticipants(ctx, req.(*MatchParticipantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArbitrageService_ExecuteTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).ExecuteTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.ArbitrageService/ExecuteTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).ExecuteTrade(ctx, req.(*ExecuteTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArbitrageService_GetMarketAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).GetMarketAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.ArbitrageService/GetMarketAnalysis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).GetMarketAnalysis(ctx, req.(*GetMarketAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArbitrageService_SubscribeToOpportunities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOpportunitiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArbitrageServiceServer).SubscribeToOpportunities(m, &arbitrageServiceSubscribeToOpportunitiesServer{stream})
}

type arbitrageServiceSubscribeToOpportunitiesServer struct {
	grpc.ServerStream
}

func (x *arbitrageServiceSubscribeToOpportunitiesServer) Send(m *OpportunityEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ArbitrageService_GetParticipantProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParticipantProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).GetParticipantProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.ArbitrageService/GetParticipantProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).GetParticipantProfile(ctx, req.(*GetParticipantProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArbitrageService_UpdateParticipantPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParticipantPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArbitrageServiceServer).UpdateParticipantPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.ArbitrageService/UpdateParticipantPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArbitrageServiceServer).UpdateParticipantPreferences(ctx, req.(*UpdateParticipantPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArbitrageService_ServiceDesc is the grpc.ServiceDesc for ArbitrageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArbitrageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arbitrage.ArbitrageService",
	HandlerType: (*ArbitrageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOpportunity",
			Handler:    _ArbitrageService_CreateOpportunity_Handler,
		},
		{
			MethodName: "GetOpportunities",
			Handler:    _ArbitrageService_GetOpportunities_Handler,
		},
		{
			MethodName: "MatchParticipants",
			Handler:    _ArbitrageService_MatchParticipants_Handler,
		},
		{
			MethodName: "ExecuteTrade",
			Handler:    _ArbitrageService_ExecuteTrade_Handler,
		},
		{
			MethodName: "GetMarketAnalysis",
			Handler:    _ArbitrageService_GetMarketAnalysis_Handler,
		},
		{
			MethodName: "GetParticipantProfile",
			Handler:    _ArbitrageService_GetParticipantProfile_Handler,
		},
		{
			MethodName: "UpdateParticipantPreferences",
			Handler:    _ArbitrageService_UpdateParticipantPreferences_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToOpportunities",
			Handler:       _ArbitrageService_SubscribeToOpportunities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arbitrage.proto",
}

// MarketDataServiceClient is the client API for MarketDataService service.
type MarketDataServiceClient interface {
	// Get current market prices
	GetMarketPrices(ctx context.Context, in *GetMarketPricesRequest, opts ...grpc.CallOption) (*GetMarketPricesResponse, error)
	// Subscribe to price updates
	SubscribeToPrices(ctx context.Context, in *SubscribePricesRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeToPricesClient, error)
	// Get historical data
	GetHistoricalData(ctx context.Context, in *GetHistoricalDataRequest, opts ...grpc.CallOption) (*GetHistoricalDataResponse, error)
	// Get market depth
	GetMarketDepth(ctx context.Context, in *GetMarketDepthRequest, opts ...grpc.CallOption) (*GetMarketDepthResponse, error)
}

type marketDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketDataServiceClient(cc grpc.ClientConnInterface) MarketDataServiceClient {
	return &marketDataServiceClient{cc}
}

func (c *marketDataServiceClient) GetMarketPrices(ctx context.Context, in *GetMarketPricesRequest, opts ...grpc.CallOption) (*GetMarketPricesResponse, error) {
	out := new(GetMarketPricesResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.MarketDataService/GetMarketPrices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) SubscribeToPrices(ctx context.Context, in *SubscribePricesRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeToPricesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[0], "/arbitrage.MarketDataService/SubscribeToPrices", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataServiceSubscribeToPricesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketDataService_SubscribeToPricesClient interface {
	Recv() (*PriceUpdate, error)
	grpc.ClientStream
}

type marketDataServiceSubscribeToPricesClient struct {
	grpc.ClientStream
}

func (x *marketDataServiceSubscribeToPricesClient) Recv() (*PriceUpdate, error) {
	m := new(PriceUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketDataServiceClient) GetHistoricalData(ctx context.Context, in *GetHistoricalDataRequest, opts ...grpc.CallOption) (*GetHistoricalDataResponse, error) {
	out := new(GetHistoricalDataResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.MarketDataService/GetHistoricalData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) GetMarketDepth(ctx context.Context, in *GetMarketDepthRequest, opts ...grpc.CallOption) (*GetMarketDepthResponse, error) {
	out := new(GetMarketDepthResponse)
	err := c.cc.Invoke(ctx, "/arbitrage.MarketDataService/GetMarketDepth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketDataServiceServer is the server API for MarketDataService service.
type MarketDataServiceServer interface {
	// Get current market prices
	GetMarketPrices(context.Context, *GetMarketPricesRequest) (*GetMarketPricesResponse, error)
	// Subscribe to price updates
	SubscribeToPrices(*SubscribePricesRequest, MarketDataService_SubscribeToPricesServer) error
	// Get historical data
	GetHistoricalData(context.Context, *GetHistoricalDataRequest) (*GetHistoricalDataResponse, error)
	// Get market depth
	GetMarketDepth(context.Context, *GetMarketDepthRequest) (*GetMarketDepthResponse, error)
	mustEmbedUnimplementedMarketDataServiceServer()
}

// UnimplementedMarketDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketDataServiceServer struct {
}

func (UnimplementedMarketDataServiceServer) GetMarketPrices(context.Context, *GetMarketPricesRequest) (*GetMarketPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPrices not implemented")
}
func (UnimplementedMarketDataServiceServer) SubscribeToPrices(*SubscribePricesRequest, MarketDataService_SubscribeToPricesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToPrices not implemented")
}
func (UnimplementedMarketDataServiceServer) GetHistoricalData(context.Context, *GetHistoricalDataRequest) (*GetHistoricalDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalData not implemented")
}
func (UnimplementedMarketDataServiceServer) GetMarketDepth(context.Context, *GetMarketDepthRequest) (*GetMarketDepthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketDepth not implemented")
}
func (UnimplementedMarketDataServiceServer) mustEmbedUnimplementedMarketDataServiceServer() {}

// MarketDataService_SubscribeToPricesServer is the server API for MarketDataService_SubscribeToPrices service.
type MarketDataService_SubscribeToPricesServer interface {
	Send(*PriceUpdate) error
	grpc.ServerStream
}

func RegisterMarketDataServiceServer(s grpc.ServiceRegistrar, srv MarketDataServiceServer) {
	s.RegisterService(&MarketDataService_ServiceDesc, srv)
}

func _MarketDataService_GetMarketPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).GetMarketPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbitrage.MarketDataService/GetMarketPrices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).GetMarketPrices(ctx, req.(*GetMarketPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var MarketDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "arbitrage.MarketDataService",
	HandlerType: (*MarketDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarketPrices",
			Handler:    _MarketDataService_GetMarketPrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arbitrage.proto",
}
