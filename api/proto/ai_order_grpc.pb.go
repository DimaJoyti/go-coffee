// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: ai_order.proto

package ai_order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIOrderService_CreateOrder_FullMethodName             = "/ai_order.AIOrderService/CreateOrder"
	AIOrderService_GetOrder_FullMethodName                = "/ai_order.AIOrderService/GetOrder"
	AIOrderService_ListOrders_FullMethodName              = "/ai_order.AIOrderService/ListOrders"
	AIOrderService_UpdateOrderStatus_FullMethodName       = "/ai_order.AIOrderService/UpdateOrderStatus"
	AIOrderService_CancelOrder_FullMethodName             = "/ai_order.AIOrderService/CancelOrder"
	AIOrderService_GetOrderRecommendations_FullMethodName = "/ai_order.AIOrderService/GetOrderRecommendations"
	AIOrderService_AnalyzeOrderPatterns_FullMethodName    = "/ai_order.AIOrderService/AnalyzeOrderPatterns"
	AIOrderService_PredictCompletionTime_FullMethodName   = "/ai_order.AIOrderService/PredictCompletionTime"
)

// AIOrderServiceClient is the client API for AIOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI Order Management Service
type AIOrderServiceClient interface {
	// Create a new order with AI analysis
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	// Get order details with AI insights
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	// List orders with AI filtering
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	// Update order status with AI validation
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
	// Cancel order with AI impact analysis
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// Get AI recommendations for order
	GetOrderRecommendations(ctx context.Context, in *GetOrderRecommendationsRequest, opts ...grpc.CallOption) (*GetOrderRecommendationsResponse, error)
	// Analyze order patterns with AI
	AnalyzeOrderPatterns(ctx context.Context, in *AnalyzeOrderPatternsRequest, opts ...grpc.CallOption) (*AnalyzeOrderPatternsResponse, error)
	// Predict order completion time
	PredictCompletionTime(ctx context.Context, in *PredictCompletionTimeRequest, opts ...grpc.CallOption) (*PredictCompletionTimeResponse, error)
}

type aIOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIOrderServiceClient(cc grpc.ClientConnInterface) AIOrderServiceClient {
	return &aIOrderServiceClient{cc}
}

func (c *aIOrderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, AIOrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIOrderServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, AIOrderService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIOrderServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, AIOrderService_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIOrderServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, AIOrderService_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIOrderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, AIOrderService_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIOrderServiceClient) GetOrderRecommendations(ctx context.Context, in *GetOrderRecommendationsRequest, opts ...grpc.CallOption) (*GetOrderRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderRecommendationsResponse)
	err := c.cc.Invoke(ctx, AIOrderService_GetOrderRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIOrderServiceClient) AnalyzeOrderPatterns(ctx context.Context, in *AnalyzeOrderPatternsRequest, opts ...grpc.CallOption) (*AnalyzeOrderPatternsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeOrderPatternsResponse)
	err := c.cc.Invoke(ctx, AIOrderService_AnalyzeOrderPatterns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIOrderServiceClient) PredictCompletionTime(ctx context.Context, in *PredictCompletionTimeRequest, opts ...grpc.CallOption) (*PredictCompletionTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictCompletionTimeResponse)
	err := c.cc.Invoke(ctx, AIOrderService_PredictCompletionTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIOrderServiceServer is the server API for AIOrderService service.
// All implementations must embed UnimplementedAIOrderServiceServer
// for forward compatibility.
//
// AI Order Management Service
type AIOrderServiceServer interface {
	// Create a new order with AI analysis
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	// Get order details with AI insights
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	// List orders with AI filtering
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	// Update order status with AI validation
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	// Cancel order with AI impact analysis
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// Get AI recommendations for order
	GetOrderRecommendations(context.Context, *GetOrderRecommendationsRequest) (*GetOrderRecommendationsResponse, error)
	// Analyze order patterns with AI
	AnalyzeOrderPatterns(context.Context, *AnalyzeOrderPatternsRequest) (*AnalyzeOrderPatternsResponse, error)
	// Predict order completion time
	PredictCompletionTime(context.Context, *PredictCompletionTimeRequest) (*PredictCompletionTimeResponse, error)
	mustEmbedUnimplementedAIOrderServiceServer()
}

// UnimplementedAIOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIOrderServiceServer struct{}

func (UnimplementedAIOrderServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedAIOrderServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedAIOrderServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedAIOrderServiceServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedAIOrderServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedAIOrderServiceServer) GetOrderRecommendations(context.Context, *GetOrderRecommendationsRequest) (*GetOrderRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderRecommendations not implemented")
}
func (UnimplementedAIOrderServiceServer) AnalyzeOrderPatterns(context.Context, *AnalyzeOrderPatternsRequest) (*AnalyzeOrderPatternsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeOrderPatterns not implemented")
}
func (UnimplementedAIOrderServiceServer) PredictCompletionTime(context.Context, *PredictCompletionTimeRequest) (*PredictCompletionTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictCompletionTime not implemented")
}
func (UnimplementedAIOrderServiceServer) mustEmbedUnimplementedAIOrderServiceServer() {}
func (UnimplementedAIOrderServiceServer) testEmbeddedByValue()                        {}

// UnsafeAIOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIOrderServiceServer will
// result in compilation errors.
type UnsafeAIOrderServiceServer interface {
	mustEmbedUnimplementedAIOrderServiceServer()
}

func RegisterAIOrderServiceServer(s grpc.ServiceRegistrar, srv AIOrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIOrderService_ServiceDesc, srv)
}

func _AIOrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIOrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIOrderService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIOrderService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIOrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIOrderService_GetOrderRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).GetOrderRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_GetOrderRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).GetOrderRecommendations(ctx, req.(*GetOrderRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIOrderService_AnalyzeOrderPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeOrderPatternsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).AnalyzeOrderPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_AnalyzeOrderPatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).AnalyzeOrderPatterns(ctx, req.(*AnalyzeOrderPatternsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIOrderService_PredictCompletionTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictCompletionTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIOrderServiceServer).PredictCompletionTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIOrderService_PredictCompletionTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIOrderServiceServer).PredictCompletionTime(ctx, req.(*PredictCompletionTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIOrderService_ServiceDesc is the grpc.ServiceDesc for AIOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_order.AIOrderService",
	HandlerType: (*AIOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _AIOrderService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _AIOrderService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _AIOrderService_ListOrders_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _AIOrderService_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _AIOrderService_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrderRecommendations",
			Handler:    _AIOrderService_GetOrderRecommendations_Handler,
		},
		{
			MethodName: "AnalyzeOrderPatterns",
			Handler:    _AIOrderService_AnalyzeOrderPatterns_Handler,
		},
		{
			MethodName: "PredictCompletionTime",
			Handler:    _AIOrderService_PredictCompletionTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai_order.proto",
}
