// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: kitchen.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KitchenService_AddToQueue_FullMethodName                = "/kitchen.KitchenService/AddToQueue"
	KitchenService_GetQueue_FullMethodName                  = "/kitchen.KitchenService/GetQueue"
	KitchenService_UpdatePreparationStatus_FullMethodName   = "/kitchen.KitchenService/UpdatePreparationStatus"
	KitchenService_CompleteOrder_FullMethodName             = "/kitchen.KitchenService/CompleteOrder"
	KitchenService_GetPerformanceMetrics_FullMethodName     = "/kitchen.KitchenService/GetPerformanceMetrics"
	KitchenService_OptimizeWorkflow_FullMethodName          = "/kitchen.KitchenService/OptimizeWorkflow"
	KitchenService_PredictCapacity_FullMethodName           = "/kitchen.KitchenService/PredictCapacity"
	KitchenService_GetIngredientRequirements_FullMethodName = "/kitchen.KitchenService/GetIngredientRequirements"
	KitchenService_AlertKitchenIssue_FullMethodName         = "/kitchen.KitchenService/AlertKitchenIssue"
)

// KitchenServiceClient is the client API for KitchenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Kitchen Management Service with AI optimization
type KitchenServiceClient interface {
	// Add order to kitchen queue with AI prioritization
	AddToQueue(ctx context.Context, in *AddToQueueRequest, opts ...grpc.CallOption) (*AddToQueueResponse, error)
	// Get current kitchen queue with AI insights
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error)
	// Update order preparation status
	UpdatePreparationStatus(ctx context.Context, in *UpdatePreparationStatusRequest, opts ...grpc.CallOption) (*UpdatePreparationStatusResponse, error)
	// Complete order preparation
	CompleteOrder(ctx context.Context, in *CompleteOrderRequest, opts ...grpc.CallOption) (*CompleteOrderResponse, error)
	// Get kitchen performance metrics with AI analysis
	GetPerformanceMetrics(ctx context.Context, in *GetPerformanceMetricsRequest, opts ...grpc.CallOption) (*GetPerformanceMetricsResponse, error)
	// Optimize kitchen workflow with AI
	OptimizeWorkflow(ctx context.Context, in *OptimizeWorkflowRequest, opts ...grpc.CallOption) (*OptimizeWorkflowResponse, error)
	// Predict kitchen capacity
	PredictCapacity(ctx context.Context, in *PredictCapacityRequest, opts ...grpc.CallOption) (*PredictCapacityResponse, error)
	// Get ingredient requirements with AI forecasting
	GetIngredientRequirements(ctx context.Context, in *GetIngredientRequirementsRequest, opts ...grpc.CallOption) (*GetIngredientRequirementsResponse, error)
	// Alert for kitchen issues
	AlertKitchenIssue(ctx context.Context, in *AlertKitchenIssueRequest, opts ...grpc.CallOption) (*AlertKitchenIssueResponse, error)
}

type kitchenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenServiceClient(cc grpc.ClientConnInterface) KitchenServiceClient {
	return &kitchenServiceClient{cc}
}

func (c *kitchenServiceClient) AddToQueue(ctx context.Context, in *AddToQueueRequest, opts ...grpc.CallOption) (*AddToQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToQueueResponse)
	err := c.cc.Invoke(ctx, KitchenService_AddToQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (*GetQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueResponse)
	err := c.cc.Invoke(ctx, KitchenService_GetQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) UpdatePreparationStatus(ctx context.Context, in *UpdatePreparationStatusRequest, opts ...grpc.CallOption) (*UpdatePreparationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePreparationStatusResponse)
	err := c.cc.Invoke(ctx, KitchenService_UpdatePreparationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) CompleteOrder(ctx context.Context, in *CompleteOrderRequest, opts ...grpc.CallOption) (*CompleteOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteOrderResponse)
	err := c.cc.Invoke(ctx, KitchenService_CompleteOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) GetPerformanceMetrics(ctx context.Context, in *GetPerformanceMetricsRequest, opts ...grpc.CallOption) (*GetPerformanceMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPerformanceMetricsResponse)
	err := c.cc.Invoke(ctx, KitchenService_GetPerformanceMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) OptimizeWorkflow(ctx context.Context, in *OptimizeWorkflowRequest, opts ...grpc.CallOption) (*OptimizeWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizeWorkflowResponse)
	err := c.cc.Invoke(ctx, KitchenService_OptimizeWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) PredictCapacity(ctx context.Context, in *PredictCapacityRequest, opts ...grpc.CallOption) (*PredictCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictCapacityResponse)
	err := c.cc.Invoke(ctx, KitchenService_PredictCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) GetIngredientRequirements(ctx context.Context, in *GetIngredientRequirementsRequest, opts ...grpc.CallOption) (*GetIngredientRequirementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIngredientRequirementsResponse)
	err := c.cc.Invoke(ctx, KitchenService_GetIngredientRequirements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenServiceClient) AlertKitchenIssue(ctx context.Context, in *AlertKitchenIssueRequest, opts ...grpc.CallOption) (*AlertKitchenIssueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AlertKitchenIssueResponse)
	err := c.cc.Invoke(ctx, KitchenService_AlertKitchenIssue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitchenServiceServer is the server API for KitchenService service.
// All implementations must embed UnimplementedKitchenServiceServer
// for forward compatibility.
//
// Kitchen Management Service with AI optimization
type KitchenServiceServer interface {
	// Add order to kitchen queue with AI prioritization
	AddToQueue(context.Context, *AddToQueueRequest) (*AddToQueueResponse, error)
	// Get current kitchen queue with AI insights
	GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error)
	// Update order preparation status
	UpdatePreparationStatus(context.Context, *UpdatePreparationStatusRequest) (*UpdatePreparationStatusResponse, error)
	// Complete order preparation
	CompleteOrder(context.Context, *CompleteOrderRequest) (*CompleteOrderResponse, error)
	// Get kitchen performance metrics with AI analysis
	GetPerformanceMetrics(context.Context, *GetPerformanceMetricsRequest) (*GetPerformanceMetricsResponse, error)
	// Optimize kitchen workflow with AI
	OptimizeWorkflow(context.Context, *OptimizeWorkflowRequest) (*OptimizeWorkflowResponse, error)
	// Predict kitchen capacity
	PredictCapacity(context.Context, *PredictCapacityRequest) (*PredictCapacityResponse, error)
	// Get ingredient requirements with AI forecasting
	GetIngredientRequirements(context.Context, *GetIngredientRequirementsRequest) (*GetIngredientRequirementsResponse, error)
	// Alert for kitchen issues
	AlertKitchenIssue(context.Context, *AlertKitchenIssueRequest) (*AlertKitchenIssueResponse, error)
	mustEmbedUnimplementedKitchenServiceServer()
}

// UnimplementedKitchenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKitchenServiceServer struct{}

func (UnimplementedKitchenServiceServer) AddToQueue(context.Context, *AddToQueueRequest) (*AddToQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToQueue not implemented")
}
func (UnimplementedKitchenServiceServer) GetQueue(context.Context, *GetQueueRequest) (*GetQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (UnimplementedKitchenServiceServer) UpdatePreparationStatus(context.Context, *UpdatePreparationStatusRequest) (*UpdatePreparationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreparationStatus not implemented")
}
func (UnimplementedKitchenServiceServer) CompleteOrder(context.Context, *CompleteOrderRequest) (*CompleteOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOrder not implemented")
}
func (UnimplementedKitchenServiceServer) GetPerformanceMetrics(context.Context, *GetPerformanceMetricsRequest) (*GetPerformanceMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceMetrics not implemented")
}
func (UnimplementedKitchenServiceServer) OptimizeWorkflow(context.Context, *OptimizeWorkflowRequest) (*OptimizeWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeWorkflow not implemented")
}
func (UnimplementedKitchenServiceServer) PredictCapacity(context.Context, *PredictCapacityRequest) (*PredictCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PredictCapacity not implemented")
}
func (UnimplementedKitchenServiceServer) GetIngredientRequirements(context.Context, *GetIngredientRequirementsRequest) (*GetIngredientRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngredientRequirements not implemented")
}
func (UnimplementedKitchenServiceServer) AlertKitchenIssue(context.Context, *AlertKitchenIssueRequest) (*AlertKitchenIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertKitchenIssue not implemented")
}
func (UnimplementedKitchenServiceServer) mustEmbedUnimplementedKitchenServiceServer() {}
func (UnimplementedKitchenServiceServer) testEmbeddedByValue()                        {}

// UnsafeKitchenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KitchenServiceServer will
// result in compilation errors.
type UnsafeKitchenServiceServer interface {
	mustEmbedUnimplementedKitchenServiceServer()
}

func RegisterKitchenServiceServer(s grpc.ServiceRegistrar, srv KitchenServiceServer) {
	// If the following call pancis, it indicates UnimplementedKitchenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KitchenService_ServiceDesc, srv)
}

func _KitchenService_AddToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).AddToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_AddToQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).AddToQueue(ctx, req.(*AddToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_GetQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).GetQueue(ctx, req.(*GetQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_UpdatePreparationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreparationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).UpdatePreparationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_UpdatePreparationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).UpdatePreparationStatus(ctx, req.(*UpdatePreparationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_CompleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).CompleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_CompleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).CompleteOrder(ctx, req.(*CompleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_GetPerformanceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).GetPerformanceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_GetPerformanceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).GetPerformanceMetrics(ctx, req.(*GetPerformanceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_OptimizeWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).OptimizeWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_OptimizeWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).OptimizeWorkflow(ctx, req.(*OptimizeWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_PredictCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).PredictCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_PredictCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).PredictCapacity(ctx, req.(*PredictCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_GetIngredientRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngredientRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).GetIngredientRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_GetIngredientRequirements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).GetIngredientRequirements(ctx, req.(*GetIngredientRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KitchenService_AlertKitchenIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertKitchenIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServiceServer).AlertKitchenIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KitchenService_AlertKitchenIssue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServiceServer).AlertKitchenIssue(ctx, req.(*AlertKitchenIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KitchenService_ServiceDesc is the grpc.ServiceDesc for KitchenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KitchenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kitchen.KitchenService",
	HandlerType: (*KitchenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToQueue",
			Handler:    _KitchenService_AddToQueue_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _KitchenService_GetQueue_Handler,
		},
		{
			MethodName: "UpdatePreparationStatus",
			Handler:    _KitchenService_UpdatePreparationStatus_Handler,
		},
		{
			MethodName: "CompleteOrder",
			Handler:    _KitchenService_CompleteOrder_Handler,
		},
		{
			MethodName: "GetPerformanceMetrics",
			Handler:    _KitchenService_GetPerformanceMetrics_Handler,
		},
		{
			MethodName: "OptimizeWorkflow",
			Handler:    _KitchenService_OptimizeWorkflow_Handler,
		},
		{
			MethodName: "PredictCapacity",
			Handler:    _KitchenService_PredictCapacity_Handler,
		},
		{
			MethodName: "GetIngredientRequirements",
			Handler:    _KitchenService_GetIngredientRequirements_Handler,
		},
		{
			MethodName: "AlertKitchenIssue",
			Handler:    _KitchenService_AlertKitchenIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitchen.proto",
}
