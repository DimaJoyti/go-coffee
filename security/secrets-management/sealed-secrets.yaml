apiVersion: v1
kind: Namespace
metadata:
  name: sealed-secrets
  labels:
    name: sealed-secrets
    security.gocoffee.dev/managed: "true"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secrets-unsealer
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["bitnami.com"]
  resources: ["sealedsecrets/status"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sealed-secrets-controller
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
- kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: sealed-secrets
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sealed-secrets-service-proxier
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["services"]
  resourceNames: ["sealed-secrets-controller"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["services/proxy"]
  resourceNames: ["sealed-secrets-controller", "http:sealed-secrets-controller:"]
  verbs: ["create", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sealed-secrets-service-proxier
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-service-proxier
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:authenticated
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: sealed-secrets
      app.kubernetes.io/component: controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sealed-secrets
        app.kubernetes.io/component: controller
    spec:
      containers:
      - args:
        - --update-status
        - --rotate-period=720h  # 30 days
        - --key-renew-period=720h
        - --key-cutoff-time=2160h  # 90 days
        command:
        - controller
        env:
        - name: SEALED_SECRETS_UPDATE_STATUS
          value: "true"
        image: quay.io/bitnami/sealed-secrets-controller:v0.24.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
        name: sealed-secrets-controller
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8081
          name: metrics
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      securityContext:
        fsGroup: 65534
      serviceAccountName: sealed-secrets-controller
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: tmp
---
apiVersion: v1
kind: Service
metadata:
  name: sealed-secrets-controller
  namespace: sealed-secrets
  labels:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
spec:
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: metrics
    port: 8081
    targetPort: 8081
  selector:
    app.kubernetes.io/name: sealed-secrets
    app.kubernetes.io/component: controller
  type: ClusterIP
---
# Go Coffee Database Secrets (Sealed)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-db-secret
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: go-coffee
    app.kubernetes.io/component: database
    security.gocoffee.dev/secret-type: database
spec:
  encryptedData:
    # These would be encrypted with kubeseal
    # Example: echo -n "mypassword" | kubeseal --raw --from-file=/dev/stdin --name=go-coffee-db-secret --namespace=go-coffee
    postgres-password: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY...  # Encrypted
    postgres-user: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...     # Encrypted
    postgres-database: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY... # Encrypted
  template:
    metadata:
      name: go-coffee-db-secret
      namespace: go-coffee
      labels:
        app.kubernetes.io/name: go-coffee
        app.kubernetes.io/component: database
    type: Opaque
---
# Go Coffee Redis Secrets (Sealed)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-redis-secret
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: go-coffee
    app.kubernetes.io/component: cache
    security.gocoffee.dev/secret-type: cache
spec:
  encryptedData:
    redis-password: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY...  # Encrypted
    redis-auth: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...     # Encrypted
  template:
    metadata:
      name: go-coffee-redis-secret
      namespace: go-coffee
      labels:
        app.kubernetes.io/name: go-coffee
        app.kubernetes.io/component: cache
    type: Opaque
---
# Go Coffee API Keys (Sealed)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-api-keys
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: go-coffee
    app.kubernetes.io/component: api
    security.gocoffee.dev/secret-type: api-keys
spec:
  encryptedData:
    jwt-secret: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY...      # Encrypted
    api-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...       # Encrypted
    webhook-secret: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY... # Encrypted
  template:
    metadata:
      name: go-coffee-api-keys
      namespace: go-coffee
      labels:
        app.kubernetes.io/name: go-coffee
        app.kubernetes.io/component: api
    type: Opaque
---
# Go Coffee Payment Secrets (Ultra-Secure)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-payment-secrets
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: go-coffee
    app.kubernetes.io/component: payment
    security.gocoffee.dev/secret-type: payment
    security.gocoffee.dev/pci-dss: "true"
spec:
  encryptedData:
    stripe-secret-key: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY...    # Encrypted
    stripe-webhook-secret: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY... # Encrypted
    paypal-client-secret: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...  # Encrypted
    encryption-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...       # Encrypted
  template:
    metadata:
      name: go-coffee-payment-secrets
      namespace: go-coffee
      labels:
        app.kubernetes.io/name: go-coffee
        app.kubernetes.io/component: payment
        security.gocoffee.dev/pci-dss: "true"
    type: Opaque
---
# Go Coffee AI Secrets
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-ai-keys
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: go-coffee
    app.kubernetes.io/component: ai
    security.gocoffee.dev/secret-type: ai-keys
spec:
  encryptedData:
    openai-api-key: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY...     # Encrypted
    gemini-api-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...    # Encrypted
    claude-api-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...    # Encrypted
    huggingface-token: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY... # Encrypted
  template:
    metadata:
      name: go-coffee-ai-keys
      namespace: go-coffee
      labels:
        app.kubernetes.io/name: go-coffee
        app.kubernetes.io/component: ai
    type: Opaque
---
# Go Coffee Web3 Secrets
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-web3-keys
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: go-coffee
    app.kubernetes.io/component: web3
    security.gocoffee.dev/secret-type: web3-keys
spec:
  encryptedData:
    ethereum-private-key: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY...  # Encrypted
    bsc-private-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...     # Encrypted
    polygon-private-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY... # Encrypted
    solana-private-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...  # Encrypted
    infura-api-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...     # Encrypted
    alchemy-api-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...    # Encrypted
  template:
    metadata:
      name: go-coffee-web3-keys
      namespace: go-coffee
      labels:
        app.kubernetes.io/name: go-coffee
        app.kubernetes.io/component: web3
    type: Opaque
---
# Go Coffee TLS Certificates (Sealed)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-tls
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: go-coffee
    app.kubernetes.io/component: tls
    security.gocoffee.dev/secret-type: tls
spec:
  encryptedData:
    tls.crt: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY...  # Encrypted certificate
    tls.key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY... # Encrypted private key
  template:
    metadata:
      name: go-coffee-tls
      namespace: go-coffee
      labels:
        app.kubernetes.io/name: go-coffee
        app.kubernetes.io/component: tls
    type: kubernetes.io/tls
---
# Go Coffee Monitoring Secrets
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: go-coffee-monitoring-secrets
  namespace: go-coffee-monitoring
  labels:
    app.kubernetes.io/name: go-coffee-monitoring
    app.kubernetes.io/component: secrets
    security.gocoffee.dev/secret-type: monitoring
spec:
  encryptedData:
    grafana-admin-password: AgBy3i4OJSWK+PiTySYZZA9rO5QtQY... # Encrypted
    slack-webhook-url: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...    # Encrypted
    pagerduty-key: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...       # Encrypted
    smtp-password: AgAKBgUrOhyb+L2PiTySYZZA9rO5QtQY...       # Encrypted
  template:
    metadata:
      name: go-coffee-monitoring-secrets
      namespace: go-coffee-monitoring
      labels:
        app.kubernetes.io/name: go-coffee-monitoring
        app.kubernetes.io/component: secrets
    type: Opaque
