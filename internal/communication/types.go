package communication

// gRPC Request/Response types (mock protobuf types)

// SendMessageRequest represents a request to send a message
type SendMessageRequest struct {
	Type              string            `json:"type"`
	Source            string            `json:"source"`
	Target            string            `json:"target"`
	Payload           map[string]string `json:"payload"`
	Priority          string            `json:"priority,omitempty"`
	CorrelationId     string            `json:"correlation_id,omitempty"`
	ExpirationSeconds int64             `json:"expiration_seconds,omitempty"`
	Headers           map[string]string `json:"headers,omitempty"`
}

// SendMessageResponse represents a response to send message request
type SendMessageResponse struct {
	MessageId string `json:"message_id"`
	Status    string `json:"status"`
	Timestamp int64  `json:"timestamp"`
}

// PublishEventRequest represents a request to publish an event
type PublishEventRequest struct {
	Type              string            `json:"type"`
	Source            string            `json:"source"`
	AggregateId       string            `json:"aggregate_id"`
	AggregateType     string            `json:"aggregate_type"`
	Version           int64             `json:"version,omitempty"`
	Data              map[string]string `json:"data"`
	CorrelationId     string            `json:"correlation_id,omitempty"`
	ExpirationSeconds int64             `json:"expiration_seconds,omitempty"`
	Metadata          map[string]string `json:"metadata,omitempty"`
}

// PublishEventResponse represents a response to publish event request
type PublishEventResponse struct {
	EventId   string `json:"event_id"`
	Status    string `json:"status"`
	Timestamp int64  `json:"timestamp"`
}

// SubscribeRequest represents a request to create a subscription
type SubscribeRequest struct {
	Name            string                  `json:"name"`
	Type            string                  `json:"type"`
	SubscriberId    string                  `json:"subscriber_id"`
	SubscriberType  string                  `json:"subscriber_type"`
	Topic           string                  `json:"topic"`
	Filters         []*SubscriptionFilter   `json:"filters,omitempty"`
	WebhookUrl      string                  `json:"webhook_url,omitempty"`
	WebhookHeaders  map[string]string       `json:"webhook_headers,omitempty"`
}

// SubscriptionFilter represents a subscription filter
type SubscriptionFilter struct {
	Field    string      `json:"field"`
	Operator string      `json:"operator"`
	Value    interface{} `json:"value"`
}

// SubscribeResponse represents a response to subscribe request
type SubscribeResponse struct {
	SubscriptionId string `json:"subscription_id"`
	Status         string `json:"status"`
	Timestamp      int64  `json:"timestamp"`
}

// HealthRequest represents a health check request
type HealthRequest struct {
	Service string `json:"service,omitempty"`
}

// HealthResponse represents a health check response
type HealthResponse struct {
	Status    string            `json:"status"`
	Timestamp int64             `json:"timestamp"`
	Details   map[string]string `json:"details,omitempty"`
}

// StatsRequest represents a statistics request
type StatsRequest struct {
	Period string `json:"period,omitempty"`
}

// StatsResponse represents a statistics response
type StatsResponse struct {
	TotalMessages       int64   `json:"total_messages"`
	TotalEvents         int64   `json:"total_events"`
	ActiveSubscriptions int64   `json:"active_subscriptions"`
	MessageRate         float64 `json:"message_rate"`
	ErrorRate           float64 `json:"error_rate"`
	Timestamp           int64   `json:"timestamp"`
}

// UnimplementedCommunicationServiceServer is a placeholder for gRPC server
type UnimplementedCommunicationServiceServer struct{}

// RegisterCommunicationServiceServer registers the communication service with gRPC server
func RegisterCommunicationServiceServer(s interface{}, srv *Service) {
	// Mock implementation - in production, this would be generated by protoc
	// For now, we'll just log that the service is registered
}
