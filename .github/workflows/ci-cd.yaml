name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY_NAMESPACE: ${{ github.repository_owner }}
  KUBERNETES_NAMESPACE: coffee-system

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Build Producer
        run: |
          cd producer
          go mod tidy
          go build -v ./...

      - name: Test Producer
        run: |
          cd producer
          go test -v ./...

      - name: Build Consumer
        run: |
          cd consumer
          go mod tidy
          go build -v ./...

      - name: Test Consumer
        run: |
          cd consumer
          go test -v ./...

      - name: Build Streams
        run: |
          cd streams
          go mod tidy
          go build -v ./...

      - name: Test Streams
        run: |
          cd streams
          go test -v ./...

  build-and-push-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata for Producer
        id: meta-producer
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/coffee-producer
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Producer image
        uses: docker/build-push-action@v4
        with:
          context: ./producer
          push: true
          tags: ${{ steps.meta-producer.outputs.tags }}
          labels: ${{ steps.meta-producer.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Consumer
        id: meta-consumer
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/coffee-consumer
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Consumer image
        uses: docker/build-push-action@v4
        with:
          context: ./consumer
          push: true
          tags: ${{ steps.meta-consumer.outputs.tags }}
          labels: ${{ steps.meta-consumer.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Streams
        id: meta-streams
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/coffee-streams
          tags: |
            type=sha,format=short
            type=ref,event=branch
            latest

      - name: Build and push Streams image
        uses: docker/build-push-action@v4
        with:
          context: ./streams
          push: true
          tags: ${{ steps.meta-streams.outputs.tags }}
          labels: ${{ steps.meta-streams.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Deploy to Kubernetes
        run: |
          export REGISTRY="${{ env.REGISTRY }}"
          export REGISTRY_NAMESPACE="${{ env.REGISTRY_NAMESPACE }}"
          export IMAGE_TAG="sha-$(git rev-parse --short HEAD)"
          
          # Update values file with image tag
          cat > kubernetes/helm/coffee-system/values-prod.yaml <<EOF
          global:
            registry: ${REGISTRY}/${REGISTRY_NAMESPACE}/
            imagePullPolicy: Always
            environment: production
          
          producer:
            tag: ${IMAGE_TAG}
          
          consumer:
            tag: ${IMAGE_TAG}
          
          streams:
            tag: ${IMAGE_TAG}
          EOF
          
          # Deploy with Helm
          helm upgrade --install coffee-system ./kubernetes/helm/coffee-system \
            --namespace ${{ env.KUBERNETES_NAMESPACE }} \
            --create-namespace \
            -f kubernetes/helm/coffee-system/values-prod.yaml
