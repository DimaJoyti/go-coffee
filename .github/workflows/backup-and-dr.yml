name: Backup and Disaster Recovery

on:
  schedule:
    # Daily backup at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly DR test on Sundays at 4 AM UTC
    - cron: '0 4 * * 0'
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Type of backup to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - incremental
          - config-only
      environment:
        description: 'Environment to backup'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      test_restore:
        description: 'Test restore after backup'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  BACKUP_BUCKET: go-coffee-backups
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # Automated Backup Job
  backup:
    name: Create Backup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.backup_type != ''
    
    strategy:
      matrix:
        environment: [production, staging]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl for environment
        run: |
          if [ "${{ matrix.environment }}" == "production" ]; then
            echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          elif [ "${{ matrix.environment }}" == "staging" ]; then
            echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          fi
          export KUBECONFIG=kubeconfig

      - name: Create backup
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          BACKUP_TYPE: ${{ github.event.inputs.backup_type || 'full' }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          chmod +x scripts/disaster-recovery/backup.sh
          ./scripts/disaster-recovery/backup.sh

      - name: Verify backup integrity
        run: |
          chmod +x scripts/disaster-recovery/verify-backup.sh
          ./scripts/disaster-recovery/verify-backup.sh

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backup-${{ matrix.environment }}-${{ github.run_number }}
          path: /var/backups/go-coffee/${{ matrix.environment }}/
          retention-days: 7

      - name: Notify backup completion
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ Backup completed successfully for ${{ matrix.environment }} environment"}' \
              ${{ env.SLACK_WEBHOOK }}
          else
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ Backup failed for ${{ matrix.environment }} environment"}' \
              ${{ env.SLACK_WEBHOOK }}
          fi

  # Test Restore Job
  test-restore:
    name: Test Restore
    runs-on: ubuntu-latest
    needs: backup
    if: github.event.inputs.test_restore == 'true' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl for test environment
        run: |
          echo "${{ secrets.KUBE_CONFIG_TEST }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Download latest backup
        run: |
          aws s3 cp s3://${{ env.BACKUP_BUCKET }}/production/latest/ ./backup/ --recursive

      - name: Test restore procedure
        env:
          ENVIRONMENT: test
          NAMESPACE: go-coffee-test
        run: |
          chmod +x scripts/disaster-recovery/restore.sh
          ./scripts/disaster-recovery/restore.sh -e test -d ./backup/backup.tar.gz

      - name: Verify restored services
        run: |
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh --environment=test --timeout=300

      - name: Cleanup test environment
        if: always()
        run: |
          kubectl delete namespace go-coffee-test --ignore-not-found=true

      - name: Notify restore test results
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ Disaster recovery test completed successfully"}' \
              ${{ env.SLACK_WEBHOOK }}
          else
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ Disaster recovery test failed"}' \
              ${{ env.SLACK_WEBHOOK }}
          fi

  # Backup Monitoring Job
  backup-monitoring:
    name: Monitor Backup Health
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check backup health
        run: |
          chmod +x scripts/monitoring/backup-monitor.sh
          ./scripts/monitoring/backup-monitor.sh

      - name: Check DR readiness
        run: |
          chmod +x scripts/monitoring/dr-readiness.sh
          ./scripts/monitoring/dr-readiness.sh

      - name: Generate backup report
        run: |
          cat > backup-report.md << EOF
          # Backup Health Report - $(date)
          
          ## Backup Status
          $(aws s3 ls s3://${{ env.BACKUP_BUCKET }}/production/ --recursive | tail -10)
          
          ## Storage Usage
          $(aws s3api list-objects-v2 --bucket ${{ env.BACKUP_BUCKET }} --query 'sum(Contents[].Size)' --output text | awk '{print $1/1024/1024/1024 " GB"}')
          
          ## Recent Backups
          $(aws s3 ls s3://${{ env.BACKUP_BUCKET }}/production/ | tail -5)
          EOF

      - name: Upload backup report
        uses: actions/upload-artifact@v3
        with:
          name: backup-report-${{ github.run_number }}
          path: backup-report.md

  # Cleanup Old Backups
  cleanup-backups:
    name: Cleanup Old Backups
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup old backups
        env:
          RETENTION_DAYS: 90
        run: |
          chmod +x scripts/disaster-recovery/cleanup-old-backups.sh
          ./scripts/disaster-recovery/cleanup-old-backups.sh

      - name: Update backup inventory
        run: |
          aws s3 ls s3://${{ env.BACKUP_BUCKET }}/ --recursive > backup-inventory.txt
          aws s3 cp backup-inventory.txt s3://${{ env.BACKUP_BUCKET }}/inventory/backup-inventory-$(date +%Y%m%d).txt

  # DR Simulation (Weekly)
  dr-simulation:
    name: Disaster Recovery Simulation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 4 * * 0'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl for DR environment
        run: |
          echo "${{ secrets.KUBE_CONFIG_DR }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Run DR simulation
        env:
          ENVIRONMENT: dr-test
          SCENARIO: complete-failure
        run: |
          chmod +x scripts/disaster-recovery/dr-simulation.sh
          ./scripts/disaster-recovery/dr-simulation.sh --scenario=${{ env.SCENARIO }}

      - name: Generate DR report
        run: |
          cat > dr-simulation-report.md << EOF
          # Disaster Recovery Simulation Report - $(date)
          
          ## Scenario
          Complete infrastructure failure simulation
          
          ## Results
          - RTO Target: 4 hours
          - RTO Actual: [Measured time]
          - RPO Target: 1 hour
          - RPO Actual: [Measured data loss]
          
          ## Services Tested
          - Database restoration: ✅
          - Application deployment: ✅
          - Service connectivity: ✅
          - Data integrity: ✅
          
          ## Issues Found
          [List any issues discovered]
          
          ## Recommendations
          [List improvements needed]
          EOF

      - name: Upload DR report
        uses: actions/upload-artifact@v3
        with:
          name: dr-simulation-report-${{ github.run_number }}
          path: dr-simulation-report.md

      - name: Cleanup DR environment
        if: always()
        run: |
          kubectl delete namespace go-coffee-dr-test --ignore-not-found=true

      - name: Notify DR simulation results
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"✅ Weekly DR simulation completed successfully"}' \
              ${{ env.SLACK_WEBHOOK }}
          else
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"❌ Weekly DR simulation failed - immediate attention required"}' \
              ${{ env.SLACK_WEBHOOK }}
          fi
