name: Go Coffee CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.22'
  NODE_VERSION: '18'
  KUSTOMIZE_VERSION: '5.0.0'
  CI: true

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run Go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.6"

      - name: Run gosec security scanner
        uses: securego/gosec@v2.18.2
        with:
          args: "-fmt=sarif -out=gosec.sarif ./..."

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: go_coffee_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        env:
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_NAME: go_coffee_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: postgres
          TEST_REDIS_HOST: localhost
          TEST_REDIS_PORT: 6379
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Run integration tests
        env:
          TEST_DB_HOST: localhost
          TEST_REDIS_HOST: localhost
          INTEGRATION_TESTS: true
        run: |
          go test -v -tags=integration ./pkg/infrastructure/...

  # Build and Push Docker Images
  build:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [user-gateway, security-gateway, web-ui-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service == 'web-ui-backend' && './web-ui/backend' || '.' }}
          file: ${{ matrix.service == 'web-ui-backend' && './web-ui/backend/Dockerfile' || format('./cmd/{0}/Dockerfile', matrix.service) }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan Docker images
        run: |
          for service in user-gateway security-gateway web-ui-backend; do
            echo "Scanning $service..."
            trivy image --format sarif --output ${service}-scan.sarif \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.sha }}
          done

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.gocoffee.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to development
        env:
          ENVIRONMENT: development
          NAMESPACE: go-coffee-dev
          IMAGE_TAG: dev-${{ github.sha }}
        run: |
          # Update image tags in kustomization
          cd k8s/overlays/development
          kustomize edit set image ghcr.io/dimajoyti/go-coffee/user-gateway:${IMAGE_TAG}
          kustomize edit set image ghcr.io/dimajoyti/go-coffee/security-gateway:${IMAGE_TAG}
          kustomize edit set image ghcr.io/dimajoyti/go-coffee/web-ui-backend:${IMAGE_TAG}

          # Apply manifests using kustomize
          kubectl apply -k .

          # Wait for deployments
          for service in user-gateway security-gateway web-ui-backend; do
            kubectl rollout status deployment/${service} -n ${NAMESPACE} --timeout=600s
          done

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 60

          # Test each service health endpoint
          kubectl port-forward -n go-coffee-dev service/user-gateway-service-dev 8081:8081 &
          kubectl port-forward -n go-coffee-dev service/security-gateway-service-dev 8082:8082 &
          kubectl port-forward -n go-coffee-dev service/web-ui-backend-service-dev 8090:8090 &

          sleep 10

          # Run smoke tests
          curl -f http://localhost:8081/health || exit 1
          curl -f http://localhost:8082/health || exit 1
          curl -f http://localhost:8090/health || exit 1

          echo "âœ… All services are healthy!"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.gocoffee.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Set up Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Deploy to staging
        env:
          ENVIRONMENT: staging
          NAMESPACE: go-coffee-staging
          IMAGE_TAG: staging-${{ github.sha }}
        run: |
          # Update image tags in kustomization
          cd k8s/overlays/staging
          kustomize edit set image ghcr.io/dimajoyti/go-coffee/user-gateway:${IMAGE_TAG}
          kustomize edit set image ghcr.io/dimajoyti/go-coffee/security-gateway:${IMAGE_TAG}
          kustomize edit set image ghcr.io/dimajoyti/go-coffee/web-ui-backend:${IMAGE_TAG}

          # Apply manifests using kustomize
          kubectl apply -k .

          # Wait for deployments
          kubectl rollout status deployment/user-gateway-staging -n ${NAMESPACE} --timeout=600s
          kubectl rollout status deployment/security-gateway-staging -n ${NAMESPACE} --timeout=600s
          kubectl rollout status deployment/web-ui-backend-staging -n ${NAMESPACE} --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 60

          # Test each service health endpoint
          kubectl port-forward -n go-coffee-staging service/user-gateway-service-staging 8081:8081 &
          kubectl port-forward -n go-coffee-staging service/security-gateway-service-staging 8082:8082 &
          kubectl port-forward -n go-coffee-staging service/web-ui-backend-service-staging 8090:8090 &

          sleep 10

          # Run smoke tests
          curl -f http://localhost:8081/health || exit 1
          curl -f http://localhost:8082/health || exit 1
          curl -f http://localhost:8090/health || exit 1

          echo "âœ… All services are healthy!"

      - name: Run integration tests
        run: |
          # Run comprehensive integration tests
          go test -v -tags=integration ./tests/integration/...

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://gocoffee.io

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create backup before deployment
        run: |
          # Create database backup
          kubectl exec deployment/postgres -n go-coffee -- \
            pg_dump -U go_coffee_user go_coffee > backup-$(date +%Y%m%d-%H%M%S).sql
          
          # Upload backup to S3
          aws s3 cp backup-*.sql s3://${{ secrets.BACKUP_BUCKET }}/pre-deployment/

      - name: Deploy to production
        env:
          ENVIRONMENT: production
          NAMESPACE: go-coffee
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          # Blue-green deployment
          ./scripts/deploy.sh -e production k8s --strategy=blue-green

      - name: Run production health checks
        run: |
          # Comprehensive health checks
          ./scripts/health-check.sh --environment=production --timeout=300

      - name: Notify deployment
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Deployment Status: ${{ job.status }}\nEnvironment: Production\nRef: ${{ github.ref }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          k6 run --out json=results.json tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: results.json

  # Advanced Testing Suite
  advanced-testing:
    name: Advanced Testing Suite
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install K6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start test infrastructure
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run comprehensive test suite
        env:
          INTEGRATION_TESTS: true
          PERFORMANCE_TESTS: true
          SECURITY_TESTS: true
        run: |
          chmod +x scripts/test-runner.sh
          ./scripts/test-runner.sh --all --coverage-threshold 80

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: advanced-test-results
          path: |
            reports/
            coverage/

      - name: Cleanup test infrastructure
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # Enhanced Security Scanning
  enhanced-security:
    name: Enhanced Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          scanMetadataReportFile: target/sonar/report-task.txt

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'

      - name: Scan Docker images for vulnerabilities
        run: |
          mkdir -p security-reports
          for service in user-gateway security-gateway web-ui-backend; do
            echo "Scanning $service..."
            trivy image --format sarif --output security-reports/${service}-scan.sarif \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:${{ github.sha }} || true
          done

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Upload security artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-*.sarif
            security-reports/
