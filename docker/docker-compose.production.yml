version: '3.8'

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: go-coffee-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-go_coffee_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-go_coffee_password}
      POSTGRES_DB: ${POSTGRES_DB:-go_coffee}
      POSTGRES_MULTIPLE_DATABASES: "go_coffee,auth_service,user_service,security_service"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - go-coffee-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-go_coffee_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: go-coffee-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - go-coffee-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kafka Message Broker
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: go-coffee-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - go-coffee-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: go-coffee-kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - go-coffee-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # CORE SERVICES (Clean Architecture)
  # =============================================================================

  # User Gateway Service
  user-gateway:
    build:
      context: .
      dockerfile: cmd/user-gateway/Dockerfile
    container_name: go-coffee-user-gateway
    ports:
      - "${USER_GATEWAY_PORT:-8081}:8081"
    environment:
      - PORT=8081
      - DATABASE_URL=postgres://${POSTGRES_USER:-go_coffee_user}:${POSTGRES_PASSWORD:-go_coffee_password}@postgres:5432/${POSTGRES_DB:-go_coffee}?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - go-coffee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Security Gateway Service
  security-gateway:
    build:
      context: .
      dockerfile: cmd/security-gateway/Dockerfile
    container_name: go-coffee-security-gateway
    ports:
      - "${SECURITY_GATEWAY_PORT:-8082}:8082"
    environment:
      - PORT=8082
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - RATE_LIMIT_ENABLED=true
      - WAF_ENABLED=true
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - go-coffee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Web UI Backend Service
  web-ui-backend:
    build:
      context: ./web-ui/backend
      dockerfile: Dockerfile
    container_name: go-coffee-web-ui-backend
    ports:
      - "${WEB_UI_BACKEND_PORT:-8090}:8090"
    environment:
      - PORT=8090
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - BRIGHT_DATA_API_KEY=${BRIGHT_DATA_API_KEY}
    networks:
      - go-coffee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # ADDITIONAL SERVICES
  # =============================================================================

  # API Gateway (Load Balancer)
  api-gateway:
    image: nginx:alpine
    container_name: go-coffee-api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8080}:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - user-gateway
      - security-gateway
      - web-ui-backend
    networks:
      - go-coffee-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: go-coffee-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - go-coffee-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: go-coffee-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - go-coffee-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  go-coffee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
