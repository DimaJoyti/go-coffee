# Build stage
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /workspace

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the simple orchestrator
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.version=1.0.0 -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
    -a -installsuffix cgo \
    -o llm-orchestrator-simple \
    ./cmd/llm-orchestrator-simple/

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS
RUN apk --no-cache add ca-certificates tzdata

# Create non-root user
RUN addgroup -g 1001 -S orchestrator && \
    adduser -u 1001 -S orchestrator -G orchestrator

# Set working directory
WORKDIR /app

# Copy the binary
COPY --from=builder /workspace/llm-orchestrator-simple /app/llm-orchestrator-simple

# Copy configuration
COPY config/llm-orchestrator-simple.yaml /app/config.yaml

# Create directories
RUN mkdir -p /app/logs /app/data && \
    chown -R orchestrator:orchestrator /app

# Switch to non-root user
USER orchestrator

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Set entrypoint
ENTRYPOINT ["/app/llm-orchestrator-simple"]

# Default command
CMD ["--config=/app/config.yaml", "--port=8080", "--log-level=info"]

# Labels
LABEL org.opencontainers.image.title="LLM Orchestrator Simple"
LABEL org.opencontainers.image.description="Lightweight LLM workload orchestrator"
LABEL org.opencontainers.image.vendor="Go Coffee Platform"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.source="https://github.com/DimaJoyti/go-coffee"
LABEL org.opencontainers.image.licenses="MIT"
