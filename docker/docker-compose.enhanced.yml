version: '3.8'

# ‚òï Go Coffee - Enhanced Development Environment
# Modern Docker Compose configuration with improved networking, monitoring, and development features

networks:
  go-coffee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # üóÑÔ∏è PostgreSQL Database with enhanced configuration
  postgres:
    image: postgres:15-alpine
    container_name: go-coffee-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: go_coffee
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_coffee"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # üî¥ Redis Cache with persistence and monitoring
  redis:
    image: redis:7-alpine
    container_name: go-coffee-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # üìä RedisInsight for Redis management
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: go-coffee-redisinsight
    restart: unless-stopped
    ports:
      - "8001:8001"
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.12
    depends_on:
      - redis

  # üêò Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: go-coffee-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 3s
      retries: 5

  # üì® Kafka Message Broker with enhanced configuration
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: go-coffee-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.21
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # üéõÔ∏è Kafka UI for management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: go-coffee-kafka-ui
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: go-coffee-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.22

  # üìà Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: go-coffee-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.30

  # üìä Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: go-coffee-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.31
    depends_on:
      - prometheus

  # üîç Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: go-coffee-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.32

  # üåê Nginx reverse proxy for development
  nginx:
    image: nginx:alpine
    container_name: go-coffee-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.40
    depends_on:
      - kafka-ui
      - grafana
      - redisinsight

  # üîß Development tools container
  dev-tools:
    image: golang:1.21-alpine
    container_name: go-coffee-dev-tools
    restart: "no"
    working_dir: /workspace
    volumes:
      - .:/workspace
      - go-mod-cache:/go/pkg/mod
    networks:
      go-coffee-network:
        ipv4_address: 172.20.0.50
    command: tail -f /dev/null

volumes:
  go-mod-cache:
    driver: local
