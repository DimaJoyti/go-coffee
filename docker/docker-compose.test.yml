version: '3.8'

services:
  # =============================================================================
  # TEST INFRASTRUCTURE
  # =============================================================================
  
  # PostgreSQL for testing
  postgres:
    image: postgres:16-alpine
    container_name: go-coffee-test-postgres
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: go_coffee_test
      POSTGRES_MULTIPLE_DATABASES: "go_coffee_test,auth_test,user_test,security_test"
    ports:
      - "5433:5432"
    volumes:
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis for testing
  redis:
    image: redis:7-alpine
    container_name: go-coffee-test-redis
    ports:
      - "6380:6379"
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Kafka for testing
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: go-coffee-test-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - test-network

  kafka-test:
    image: confluentinc/cp-kafka:7.4.0
    container_name: go-coffee-test-kafka
    depends_on:
      - zookeeper-test
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-test:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =============================================================================
  # TEST SERVICES
  # =============================================================================

  # User Gateway Test Service
  user-gateway-test:
    build:
      context: .
      dockerfile: cmd/user-gateway/Dockerfile
    container_name: go-coffee-test-user-gateway
    ports:
      - "8181:8081"
    environment:
      - PORT=8081
      - ENVIRONMENT=test
      - LOG_LEVEL=debug
      - DATABASE_URL=postgres://test_user:test_password@postgres:5432/go_coffee_test?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=test_jwt_secret_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Security Gateway Test Service
  security-gateway-test:
    build:
      context: .
      dockerfile: cmd/security-gateway/Dockerfile
    container_name: go-coffee-test-security-gateway
    ports:
      - "8182:8082"
    environment:
      - PORT=8082
      - ENVIRONMENT=test
      - LOG_LEVEL=debug
      - REDIS_URL=redis://redis:6379
      - RATE_LIMIT_ENABLED=false
      - WAF_ENABLED=false
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Web UI Backend Test Service
  web-ui-backend-test:
    build:
      context: ./web-ui/backend
      dockerfile: Dockerfile
    container_name: go-coffee-test-web-ui-backend
    ports:
      - "8190:8090"
    environment:
      - PORT=8090
      - ENVIRONMENT=test
      - LOG_LEVEL=debug
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # =============================================================================
  # TESTING TOOLS
  # =============================================================================

  # Test Runner Container
  test-runner:
    build:
      context: .
      dockerfile: tests/Dockerfile.test
    container_name: go-coffee-test-runner
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    environment:
      - TEST_DB_HOST=postgres
      - TEST_DB_PORT=5432
      - TEST_DB_NAME=go_coffee_test
      - TEST_DB_USER=test_user
      - TEST_DB_PASSWORD=test_password
      - TEST_REDIS_HOST=redis
      - TEST_REDIS_PORT=6379
      - TEST_KAFKA_HOST=kafka-test
      - TEST_KAFKA_PORT=9092
      - USER_GATEWAY_URL=http://user-gateway-test:8081
      - SECURITY_GATEWAY_URL=http://security-gateway-test:8082
      - WEB_UI_BACKEND_URL=http://web-ui-backend-test:8090
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-gateway-test:
        condition: service_healthy
      security-gateway-test:
        condition: service_healthy
      web-ui-backend-test:
        condition: service_healthy
    networks:
      - test-network
    command: ["sleep", "3600"]  # Keep container running for manual test execution

  # Performance Testing with K6
  k6-performance:
    image: grafana/k6:latest
    container_name: go-coffee-k6-performance
    volumes:
      - ./tests/performance:/scripts
      - ./reports/performance:/reports
    environment:
      - API_BASE_URL=http://user-gateway-test:8081
    networks:
      - test-network
    command: ["sleep", "3600"]

  # Security Testing with OWASP ZAP
  zap-security:
    image: owasp/zap2docker-stable
    container_name: go-coffee-zap-security
    volumes:
      - ./reports/security:/zap/wrk
    networks:
      - test-network
    command: ["sleep", "3600"]

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
