# Go Coffee CLI Makefile
.PHONY: help build install clean test lint fmt vet deps run-cli

# Build variables
BINARY_NAME=gocoffee
VERSION?=dev
COMMIT?=$(shell git rev-parse --short HEAD)
DATE?=$(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
LDFLAGS=-ldflags "-X main.version=$(VERSION) -X main.commit=$(COMMIT) -X main.date=$(DATE)"

# Colors for output
CYAN=\033[0;36m
GREEN=\033[0;32m
YELLOW=\033[1;33m
RED=\033[0;31m
NC=\033[0m # No Color

help: ## Show this help message
	@echo "$(CYAN)Go Coffee CLI - Build System$(NC)"
	@echo "================================"
	@echo ""
	@echo "$(YELLOW)Available targets:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

deps: ## Install dependencies
	@echo "$(CYAN)Installing dependencies...$(NC)"
	go mod download
	go mod tidy

build: deps ## Build the CLI binary
	@echo "$(CYAN)Building $(BINARY_NAME)...$(NC)"
	go build $(LDFLAGS) -o bin/$(BINARY_NAME) cmd/gocoffee-cli/main.go
	@echo "$(GREEN)✓ Binary built: bin/$(BINARY_NAME)$(NC)"

build-all: deps ## Build for all platforms
	@echo "$(CYAN)Building for all platforms...$(NC)"
	GOOS=linux GOARCH=amd64 go build $(LDFLAGS) -o bin/$(BINARY_NAME)-linux-amd64 cmd/gocoffee-cli/main.go
	GOOS=darwin GOARCH=amd64 go build $(LDFLAGS) -o bin/$(BINARY_NAME)-darwin-amd64 cmd/gocoffee-cli/main.go
	GOOS=darwin GOARCH=arm64 go build $(LDFLAGS) -o bin/$(BINARY_NAME)-darwin-arm64 cmd/gocoffee-cli/main.go
	GOOS=windows GOARCH=amd64 go build $(LDFLAGS) -o bin/$(BINARY_NAME)-windows-amd64.exe cmd/gocoffee-cli/main.go
	@echo "$(GREEN)✓ All binaries built$(NC)"

install: build ## Install the CLI binary
	@echo "$(CYAN)Installing $(BINARY_NAME)...$(NC)"
	sudo cp bin/$(BINARY_NAME) /usr/local/bin/
	@echo "$(GREEN)✓ $(BINARY_NAME) installed to /usr/local/bin/$(NC)"

clean: ## Clean build artifacts
	@echo "$(CYAN)Cleaning build artifacts...$(NC)"
	rm -rf bin/
	go clean
	@echo "$(GREEN)✓ Clean complete$(NC)"

test: ## Run tests
	@echo "$(CYAN)Running tests...$(NC)"
	go test -v ./internal/cli/...
	@echo "$(GREEN)✓ Tests complete$(NC)"

test-coverage: ## Run tests with coverage
	@echo "$(CYAN)Running tests with coverage...$(NC)"
	go test -v -coverprofile=coverage.out ./internal/cli/...
	go tool cover -html=coverage.out -o coverage.html
	@echo "$(GREEN)✓ Coverage report generated: coverage.html$(NC)"

lint: ## Run linter
	@echo "$(CYAN)Running linter...$(NC)"
	golangci-lint run ./internal/cli/...
	@echo "$(GREEN)✓ Linting complete$(NC)"

fmt: ## Format code
	@echo "$(CYAN)Formatting code...$(NC)"
	go fmt ./internal/cli/...
	@echo "$(GREEN)✓ Formatting complete$(NC)"

vet: ## Run go vet
	@echo "$(CYAN)Running go vet...$(NC)"
	go vet ./internal/cli/...
	@echo "$(GREEN)✓ Vet complete$(NC)"

run-cli: build ## Run the CLI
	@echo "$(CYAN)Running $(BINARY_NAME)...$(NC)"
	./bin/$(BINARY_NAME)

demo: build ## Run CLI demo
	@echo "$(CYAN)Running CLI demo...$(NC)"
	@echo "$(YELLOW)Services:$(NC)"
	./bin/$(BINARY_NAME) services list
	@echo ""
	@echo "$(YELLOW)Kubernetes:$(NC)"
	./bin/$(BINARY_NAME) kubernetes get all
	@echo ""
	@echo "$(YELLOW)Cloud Resources:$(NC)"
	./bin/$(BINARY_NAME) cloud resources
	@echo ""
	@echo "$(YELLOW)Version:$(NC)"
	./bin/$(BINARY_NAME) version --detailed

dev: ## Development mode - build and run
	@echo "$(CYAN)Development mode...$(NC)"
	go run cmd/gocoffee-cli/main.go

watch: ## Watch for changes and rebuild
	@echo "$(CYAN)Watching for changes...$(NC)"
	@which air > /dev/null || (echo "$(RED)air not found. Install with: go install github.com/cosmtrek/air@latest$(NC)" && exit 1)
	air -c .air.toml

docker-build: ## Build Docker image
	@echo "$(CYAN)Building Docker image...$(NC)"
	docker build -t gocoffee-cli:$(VERSION) -f docker/Dockerfile.cli .
	@echo "$(GREEN)✓ Docker image built: gocoffee-cli:$(VERSION)$(NC)"

docker-run: docker-build ## Run CLI in Docker
	@echo "$(CYAN)Running CLI in Docker...$(NC)"
	docker run --rm -it gocoffee-cli:$(VERSION)

release: build-all ## Create release artifacts
	@echo "$(CYAN)Creating release artifacts...$(NC)"
	mkdir -p release
	cp bin/* release/
	cd release && tar -czf gocoffee-$(VERSION)-linux-amd64.tar.gz gocoffee-linux-amd64
	cd release && tar -czf gocoffee-$(VERSION)-darwin-amd64.tar.gz gocoffee-darwin-amd64
	cd release && tar -czf gocoffee-$(VERSION)-darwin-arm64.tar.gz gocoffee-darwin-arm64
	cd release && zip gocoffee-$(VERSION)-windows-amd64.zip gocoffee-windows-amd64.exe
	@echo "$(GREEN)✓ Release artifacts created in release/$(NC)"

check: fmt vet lint test ## Run all checks

all: clean deps check build ## Run full build pipeline

# Development helpers
.PHONY: dev-setup
dev-setup: ## Setup development environment
	@echo "$(CYAN)Setting up development environment...$(NC)"
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	go install github.com/cosmtrek/air@latest
	@echo "$(GREEN)✓ Development environment ready$(NC)"

.PHONY: config-example
config-example: ## Generate example configuration
	@echo "$(CYAN)Generating example configuration...$(NC)"
	@mkdir -p ~/.gocoffee
	@echo "log_level: info" > ~/.gocoffee/config.yaml
	@echo "telemetry:" >> ~/.gocoffee/config.yaml
	@echo "  enabled: true" >> ~/.gocoffee/config.yaml
	@echo "  service_name: gocoffee-cli" >> ~/.gocoffee/config.yaml
	@echo "kubernetes:" >> ~/.gocoffee/config.yaml
	@echo "  config_path: ~/.kube/config" >> ~/.gocoffee/config.yaml
	@echo "  namespace: default" >> ~/.gocoffee/config.yaml
	@echo "cloud:" >> ~/.gocoffee/config.yaml
	@echo "  provider: gcp" >> ~/.gocoffee/config.yaml
	@echo "  region: us-central1" >> ~/.gocoffee/config.yaml
	@echo "$(GREEN)✓ Example configuration created at ~/.gocoffee/config.yaml$(NC)"

.DEFAULT_GOAL := help
