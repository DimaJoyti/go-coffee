// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	ID        string   `json:"id"`
	Username  string   `json:"username"`
	Email     string   `json:"email"`
	FirstName *string  `json:"firstName,omitempty"`
	LastName  *string  `json:"lastName,omitempty"`
	IsActive  bool     `json:"isActive"`
	IsAdmin   bool     `json:"isAdmin"`
	CreatedAt string   `json:"createdAt"`
	UpdatedAt string   `json:"updatedAt"`
	Orders    []*Order `json:"orders,omitempty"`
}

type CreateAccountInput struct {
	Username  string  `json:"username"`
	Email     string  `json:"email"`
	Password  string  `json:"password"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	IsActive  *bool   `json:"isActive,omitempty"`
	IsAdmin   *bool   `json:"isAdmin,omitempty"`
}

type CreateOrderInput struct {
	AccountID string            `json:"accountId"`
	Items     []*OrderItemInput `json:"items"`
}

type CreateProductInput struct {
	VendorID    string  `json:"vendorId"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Price       float64 `json:"price"`
	IsAvailable *bool   `json:"isAvailable,omitempty"`
}

type CreateVendorInput struct {
	Name         string  `json:"name"`
	Description  *string `json:"description,omitempty"`
	ContactEmail *string `json:"contactEmail,omitempty"`
	ContactPhone *string `json:"contactPhone,omitempty"`
	Address      *string `json:"address,omitempty"`
	IsActive     *bool   `json:"isActive,omitempty"`
}

type Mutation struct {
}

type Order struct {
	ID          string       `json:"id"`
	AccountID   string       `json:"accountId"`
	Status      OrderStatus  `json:"status"`
	TotalAmount float64      `json:"totalAmount"`
	CreatedAt   string       `json:"createdAt"`
	UpdatedAt   string       `json:"updatedAt"`
	Account     *Account     `json:"account,omitempty"`
	Items       []*OrderItem `json:"items,omitempty"`
}

type OrderItem struct {
	ID         string   `json:"id"`
	OrderID    string   `json:"orderId"`
	ProductID  string   `json:"productId"`
	Quantity   int      `json:"quantity"`
	UnitPrice  float64  `json:"unitPrice"`
	TotalPrice float64  `json:"totalPrice"`
	CreatedAt  string   `json:"createdAt"`
	Product    *Product `json:"product,omitempty"`
}

type OrderItemInput struct {
	ProductID string `json:"productId"`
	Quantity  int    `json:"quantity"`
}

type Product struct {
	ID          string  `json:"id"`
	VendorID    string  `json:"vendorId"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Price       float64 `json:"price"`
	IsAvailable bool    `json:"isAvailable"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   string  `json:"updatedAt"`
	Vendor      *Vendor `json:"vendor,omitempty"`
}

type Query struct {
}

type UpdateAccountInput struct {
	Username  *string `json:"username,omitempty"`
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	IsActive  *bool   `json:"isActive,omitempty"`
	IsAdmin   *bool   `json:"isAdmin,omitempty"`
}

type UpdateProductInput struct {
	Name        *string  `json:"name,omitempty"`
	Description *string  `json:"description,omitempty"`
	Price       *float64 `json:"price,omitempty"`
	IsAvailable *bool    `json:"isAvailable,omitempty"`
}

type UpdateVendorInput struct {
	Name         *string `json:"name,omitempty"`
	Description  *string `json:"description,omitempty"`
	ContactEmail *string `json:"contactEmail,omitempty"`
	ContactPhone *string `json:"contactPhone,omitempty"`
	Address      *string `json:"address,omitempty"`
	IsActive     *bool   `json:"isActive,omitempty"`
}

type Vendor struct {
	ID           string     `json:"id"`
	Name         string     `json:"name"`
	Description  *string    `json:"description,omitempty"`
	ContactEmail *string    `json:"contactEmail,omitempty"`
	ContactPhone *string    `json:"contactPhone,omitempty"`
	Address      *string    `json:"address,omitempty"`
	IsActive     bool       `json:"isActive"`
	CreatedAt    string     `json:"createdAt"`
	UpdatedAt    string     `json:"updatedAt"`
	Products     []*Product `json:"products,omitempty"`
}

type OrderStatus string

const (
	OrderStatusPending   OrderStatus = "PENDING"
	OrderStatusPaid      OrderStatus = "PAID"
	OrderStatusShipped   OrderStatus = "SHIPPED"
	OrderStatusDelivered OrderStatus = "DELIVERED"
	OrderStatusCancelled OrderStatus = "CANCELLED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPending,
	OrderStatusPaid,
	OrderStatusShipped,
	OrderStatusDelivered,
	OrderStatusCancelled,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPending, OrderStatusPaid, OrderStatusShipped, OrderStatusDelivered, OrderStatusCancelled:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
