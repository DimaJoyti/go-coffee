package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/DimaJoyti/go-coffee/accounts-service/internal/graphql/generated"
	"github.com/DimaJoyti/go-coffee/accounts-service/internal/graphql/model"
)

// CreateAccount is the resolver for the createAccount field.
func (r *mutationResolver) CreateAccount(ctx context.Context, input model.CreateAccountInput) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: CreateAccount - createAccount"))
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, id string, input model.UpdateAccountInput) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// DeleteAccount is the resolver for the deleteAccount field.
func (r *mutationResolver) DeleteAccount(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteAccount - deleteAccount"))
}

// CreateVendor is the resolver for the createVendor field.
func (r *mutationResolver) CreateVendor(ctx context.Context, input model.CreateVendorInput) (*model.Vendor, error) {
	panic(fmt.Errorf("not implemented: CreateVendor - createVendor"))
}

// UpdateVendor is the resolver for the updateVendor field.
func (r *mutationResolver) UpdateVendor(ctx context.Context, id string, input model.UpdateVendorInput) (*model.Vendor, error) {
	panic(fmt.Errorf("not implemented: UpdateVendor - updateVendor"))
}

// DeleteVendor is the resolver for the deleteVendor field.
func (r *mutationResolver) DeleteVendor(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteVendor - deleteVendor"))
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.CreateProductInput) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.UpdateProductInput) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, id string, status model.OrderStatus) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrderStatus - updateOrderStatus"))
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteOrder - deleteOrder"))
}

// Account is the resolver for the account field.
func (r *queryResolver) Account(ctx context.Context, id string) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: Account - account"))
}

// Accounts is the resolver for the accounts field.
func (r *queryResolver) Accounts(ctx context.Context, offset *int, limit *int) ([]*model.Account, error) {
	panic(fmt.Errorf("not implemented: Accounts - accounts"))
}

// AccountsCount is the resolver for the accountsCount field.
func (r *queryResolver) AccountsCount(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: AccountsCount - accountsCount"))
}

// Vendor is the resolver for the vendor field.
func (r *queryResolver) Vendor(ctx context.Context, id string) (*model.Vendor, error) {
	panic(fmt.Errorf("not implemented: Vendor - vendor"))
}

// Vendors is the resolver for the vendors field.
func (r *queryResolver) Vendors(ctx context.Context, offset *int, limit *int) ([]*model.Vendor, error) {
	panic(fmt.Errorf("not implemented: Vendors - vendors"))
}

// VendorsCount is the resolver for the vendorsCount field.
func (r *queryResolver) VendorsCount(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: VendorsCount - vendorsCount"))
}

// SearchVendors is the resolver for the searchVendors field.
func (r *queryResolver) SearchVendors(ctx context.Context, query string, offset *int, limit *int) ([]*model.Vendor, error) {
	panic(fmt.Errorf("not implemented: SearchVendors - searchVendors"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, offset *int, limit *int) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// ProductsByVendor is the resolver for the productsByVendor field.
func (r *queryResolver) ProductsByVendor(ctx context.Context, vendorID string, offset *int, limit *int) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: ProductsByVendor - productsByVendor"))
}

// ProductsCount is the resolver for the productsCount field.
func (r *queryResolver) ProductsCount(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: ProductsCount - productsCount"))
}

// SearchProducts is the resolver for the searchProducts field.
func (r *queryResolver) SearchProducts(ctx context.Context, query string, offset *int, limit *int) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: SearchProducts - searchProducts"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, offset *int, limit *int) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// OrdersByAccount is the resolver for the ordersByAccount field.
func (r *queryResolver) OrdersByAccount(ctx context.Context, accountID string, offset *int, limit *int) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: OrdersByAccount - ordersByAccount"))
}

// OrdersByStatus is the resolver for the ordersByStatus field.
func (r *queryResolver) OrdersByStatus(ctx context.Context, status model.OrderStatus, offset *int, limit *int) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: OrdersByStatus - ordersByStatus"))
}

// OrdersCount is the resolver for the ordersCount field.
func (r *queryResolver) OrdersCount(ctx context.Context) (int, error) {
	panic(fmt.Errorf("not implemented: OrdersCount - ordersCount"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
