apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: go-coffee
spec:
  replicas: 1
  strategy:
    type: Recreate  # Important for databases with persistent storage
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_DB
        - name: POSTGRES_MULTIPLE_DATABASES
          value: "go_coffee,auth_service,user_service,security_service"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-script
        configMap:
          name: postgres-init-script
          defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: go-coffee
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  init-multiple-databases.sh: |
    #!/bin/bash
    set -e

    function create_user_and_database() {
        local database=$1
        echo "Creating user and database '$database'"
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
            CREATE USER ${database}_user WITH PASSWORD '${database}_password';
            CREATE DATABASE $database;
            GRANT ALL PRIVILEGES ON DATABASE $database TO ${database}_user;
            \c $database;
            GRANT ALL ON SCHEMA public TO ${database}_user;
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${database}_user;
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${database}_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${database}_user;
            ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${database}_user;
    EOSQL
    }

    if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
        echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
        for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
            create_user_and_database $db
        done
        echo "Multiple databases created"
    else
        echo "No multiple databases specified"
    fi
