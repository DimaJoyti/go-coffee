version: '3.8'

services:
  # Kitchen Service
  kitchen-service:
    build:
      context: ../../
      dockerfile: deployments/kitchen-service/Dockerfile
    container_name: kitchen-service
    ports:
      - "8080:8080"   # HTTP API
      - "9090:9090"   # gRPC API
      - "8081:8081"   # Health checks
      - "9091:9091"   # Metrics
    environment:
      # Service Configuration
      SERVICE_NAME: kitchen-service
      SERVICE_VERSION: 1.0.0
      ENVIRONMENT: production
      LOG_LEVEL: info
      
      # Database Configuration
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 0
      REDIS_POOL_SIZE: 20
      REDIS_MIN_IDLE_CONNS: 10
      
      # Transport Configuration
      HTTP_PORT: 8080
      GRPC_PORT: 9090
      JWT_SECRET: ${JWT_SECRET:-your-production-secret-key}
      ENABLE_CORS: true
      ENABLE_AUTH: true
      READ_TIMEOUT: 30
      WRITE_TIMEOUT: 30
      IDLE_TIMEOUT: 120
      
      # Integration Configuration
      ORDER_SERVICE_ENABLED: true
      ORDER_SERVICE_ADDRESS: order-service:50051
      ORDER_SERVICE_TIMEOUT: 10s
      ORDER_SERVICE_MAX_RETRIES: 3
      ORDER_SERVICE_SYNC_ENABLED: true
      ORDER_SERVICE_SYNC_INTERVAL: 30s
      
      # Events Configuration
      EVENTS_ENABLED: true
      EVENTS_BUFFER_SIZE: 1000
      EVENTS_WORKER_COUNT: 5
      EVENTS_RETRY_ATTEMPTS: 3
      EVENTS_RETRY_DELAY: 1s
      
      # AI Configuration
      AI_ENABLED: true
      AI_OPTIMIZATION_ENABLED: true
      AI_PREDICTION_ENABLED: true
      AI_LEARNING_RATE: 0.01
      AI_MODEL_UPDATE_INTERVAL: 1h
      AI_CAPACITY_PREDICTION_DAYS: 7
      
      # Monitoring Configuration
      METRICS_ENABLED: true
      METRICS_PORT: 9091
      METRICS_PATH: /metrics
      METRICS_INTERVAL: 15s
      METRICS_NAMESPACE: kitchen
      METRICS_SUBSYSTEM: service
      
      HEALTH_ENABLED: true
      HEALTH_PORT: 8081
      HEALTH_PATH: /health
      HEALTH_INTERVAL: 30s
      HEALTH_TIMEOUT: 5s
      
      # Tracing Configuration (optional)
      TRACING_ENABLED: ${TRACING_ENABLED:-false}
      TRACING_SERVICE_NAME: kitchen-service
      TRACING_ENDPOINT: ${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
      TRACING_SAMPLE_RATE: 0.1
    depends_on:
      - redis
      - order-service
    networks:
      - coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - kitchen-logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Database
  redis:
    image: redis:7-alpine
    container_name: kitchen-redis
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Order Service (dependency)
  order-service:
    image: go-coffee/order-service:latest
    container_name: order-service
    ports:
      - "50051:50051"  # gRPC
      - "8082:8080"    # HTTP
    environment:
      GRPC_PORT: 50051
      HTTP_PORT: 8080
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
    depends_on:
      - redis
    networks:
      - coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kitchen-prometheus
    ports:
      - "9092:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - coffee-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: kitchen-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - coffee-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Jaeger Tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: kitchen-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - coffee-network
    restart: unless-stopped
    profiles:
      - tracing

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    container_name: kitchen-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - kitchen-service
    networks:
      - coffee-network
    restart: unless-stopped
    profiles:
      - loadbalancer

networks:
  coffee-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  kitchen-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
