version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.api-gateway
    ports:
      - "8080:8080"
    environment:
      - API_GATEWAY_PORT=8080
      - PAYMENT_SERVICE_PORT=8093
      - AUTH_SERVICE_PORT=8091
      - ORDER_SERVICE_PORT=8094
      - KITCHEN_SERVICE_PORT=8095
      - AI_SEARCH_PORT=8092
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    depends_on:
      - payment-service
      - auth-service
      - order-service
      - kitchen-service
      - ai-service
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service (Bitcoin/Crypto)
  payment-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.payment-service
    ports:
      - "8093:8093"
    environment:
      - PAYMENT_SERVICE_PORT=8093
      - BITCOIN_NETWORK=mainnet
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=go_coffee
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.auth-service
    ports:
      - "8091:8091"
    environment:
      - AUTH_SERVICE_PORT=8091
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=24
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=go_coffee
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.order-service
    ports:
      - "8094:8094"
    environment:
      - ORDER_SERVICE_PORT=8094
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=go_coffee
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kitchen Service
  kitchen-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.kitchen-service
    ports:
      - "8095:8095"
    environment:
      - KITCHEN_SERVICE_PORT=8095
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=go_coffee
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8095/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service
  ai-service:
    build:
      context: ../../
      dockerfile: deployments/docker/Dockerfile.ai-service
    ports:
      - "8092:8092"
    environment:
      - AI_SEARCH_PORT=8092
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=go_coffee
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=go_coffee
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - go-coffee-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - go-coffee-network
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - go-coffee-network
    restart: unless-stopped

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - go-coffee-network
    restart: unless-stopped

  # Nginx (Load Balancer)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - go-coffee-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:

networks:
  go-coffee-network:
    driver: bridge
