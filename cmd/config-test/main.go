package main

import (
	"fmt"
	"log"
	"os"

	"github.com/DimaJoyti/go-coffee/pkg/config"
)

func main() {
	fmt.Println("üîß Go Coffee Configuration Test Utility")
	fmt.Println("========================================")
	fmt.Println()

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª–∏
	fmt.Println("üìÅ Loading environment files...")
	if err := config.AutoLoadEnvFiles(); err != nil {
		log.Printf("Warning: %v", err)
	}
	fmt.Println()

	// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
	fmt.Println("‚öôÔ∏è  Loading configuration from environment variables...")
	cfg, err := config.LoadConfigFromEnv()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}
	fmt.Println("‚úÖ Configuration loaded successfully!")
	fmt.Println()

	// –í–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
	fmt.Println("üîç Validating configuration...")
	if err := config.ValidateConfig(cfg); err != nil {
		log.Fatalf("Configuration validation failed: %v", err)
	}
	fmt.Println("‚úÖ Configuration is valid!")
	fmt.Println()

	// –í–∏–≤–æ–¥–∏–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
	fmt.Println("üìã Current configuration:")
	fmt.Println()
	config.PrintConfig(cfg)
	fmt.Println()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
	fmt.Println("üîß Service Status Check:")
	fmt.Println("========================")
	
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ feature flags
	if cfg.Features.APIGatewayEnabled {
		fmt.Printf("‚úÖ API Gateway: ENABLED (Port: %d)\n", cfg.Server.APIGatewayPort)
	} else {
		fmt.Println("‚ùå API Gateway: DISABLED")
	}

	if cfg.Features.ProducerServiceEnabled {
		fmt.Printf("‚úÖ Producer Service: ENABLED (Port: %d)\n", cfg.Server.ProducerPort)
	} else {
		fmt.Println("‚ùå Producer Service: DISABLED")
	}

	if cfg.Features.ConsumerServiceEnabled {
		fmt.Printf("‚úÖ Consumer Service: ENABLED (Port: %d)\n", cfg.Server.ConsumerPort)
	} else {
		fmt.Println("‚ùå Consumer Service: DISABLED")
	}

	if cfg.Features.StreamsServiceEnabled {
		fmt.Printf("‚úÖ Streams Service: ENABLED (Port: %d)\n", cfg.Server.StreamsPort)
	} else {
		fmt.Println("‚ùå Streams Service: DISABLED")
	}

	if cfg.Features.AISearchEnabled {
		fmt.Printf("‚úÖ AI Search Engine: ENABLED (Port: %d)\n", cfg.Server.AISearchPort)
	} else {
		fmt.Println("‚ùå AI Search Engine: DISABLED")
	}

	if cfg.Features.AuthModuleEnabled {
		fmt.Printf("‚úÖ Auth Service: ENABLED (Port: %d)\n", cfg.Server.AuthServicePort)
	} else {
		fmt.Println("‚ùå Auth Service: DISABLED")
	}

	if cfg.Features.Web3WalletEnabled {
		fmt.Println("‚úÖ Web3 Wallet: ENABLED")
	} else {
		fmt.Println("‚ùå Web3 Wallet: DISABLED")
	}

	if cfg.Features.DeFiServiceEnabled {
		fmt.Println("‚úÖ DeFi Service: ENABLED")
	} else {
		fmt.Println("‚ùå DeFi Service: DISABLED")
	}

	if cfg.Features.AIAgentsEnabled {
		fmt.Println("‚úÖ AI Agents: ENABLED")
	} else {
		fmt.Println("‚ùå AI Agents: DISABLED")
	}

	fmt.Println()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
	fmt.Println("üåê External Services Configuration:")
	fmt.Println("===================================")
	
	// Database
	fmt.Printf("üóÑÔ∏è  Database: %s@%s:%d/%s\n", 
		cfg.Database.User, cfg.Database.Host, cfg.Database.Port, cfg.Database.Name)
	
	// Redis
	fmt.Printf("üî¥ Redis: %s:%d (DB: %d)\n", 
		cfg.Redis.Host, cfg.Redis.Port, cfg.Redis.DB)
	
	// Kafka
	fmt.Printf("üì® Kafka: %v\n", cfg.Kafka.Brokers)
	fmt.Printf("   Topic: %s\n", cfg.Kafka.Topic)
	fmt.Printf("   Consumer Group: %s\n", cfg.Kafka.ConsumerGroup)
	
	fmt.Println()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ AI –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
	fmt.Println("ü§ñ AI Configuration:")
	fmt.Println("====================")
	
	if cfg.AI.OpenAIAPIKey != "" && cfg.AI.OpenAIAPIKey != "your-openai-api-key" {
		fmt.Println("‚úÖ OpenAI API Key: CONFIGURED")
	} else {
		fmt.Println("‚ùå OpenAI API Key: NOT CONFIGURED")
	}

	if cfg.AI.GeminiAPIKey != "" && cfg.AI.GeminiAPIKey != "your-gemini-api-key" {
		fmt.Println("‚úÖ Gemini API Key: CONFIGURED")
	} else {
		fmt.Println("‚ùå Gemini API Key: NOT CONFIGURED")
	}

	fmt.Printf("üîç Search Model: %s\n", cfg.AI.SearchEmbeddingModel)
	fmt.Printf("üìê Vector Dimensions: %d\n", cfg.AI.SearchVectorDimensions)
	fmt.Printf("üéØ Similarity Threshold: %.2f\n", cfg.AI.SearchSimilarityThreshold)
	
	fmt.Println()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Web3 –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
	fmt.Println("üåê Web3 Configuration:")
	fmt.Println("======================")
	
	if cfg.Web3.Ethereum.RPCURL != "" && cfg.Web3.Ethereum.RPCURL != "https://mainnet.infura.io/v3/your-project-id" {
		fmt.Println("‚úÖ Ethereum RPC: CONFIGURED")
	} else {
		fmt.Println("‚ùå Ethereum RPC: NOT CONFIGURED")
	}

	if cfg.Web3.Bitcoin.RPCURL != "" && cfg.Web3.Bitcoin.RPCURL != "https://your-bitcoin-node.com" {
		fmt.Println("‚úÖ Bitcoin RPC: CONFIGURED")
	} else {
		fmt.Println("‚ùå Bitcoin RPC: NOT CONFIGURED")
	}

	if cfg.Web3.Solana.RPCURL != "" && cfg.Web3.Solana.RPCURL != "https://api.mainnet-beta.solana.com" {
		fmt.Println("‚úÖ Solana RPC: CONFIGURED")
	} else {
		fmt.Println("‚ùå Solana RPC: NOT CONFIGURED")
	}

	fmt.Println()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–µ–∑–ø–µ–∫—É
	fmt.Println("üîí Security Configuration:")
	fmt.Println("==========================")
	
	if cfg.Security.JWTSecret != "" && cfg.Security.JWTSecret != "your-super-secret-jwt-key" {
		fmt.Println("‚úÖ JWT Secret: CONFIGURED")
	} else {
		fmt.Println("‚ùå JWT Secret: NOT CONFIGURED (SECURITY RISK!)")
	}

	if cfg.Security.EncryptionKey != "" && cfg.Security.EncryptionKey != "your-32-character-encryption-key!!" {
		fmt.Println("‚úÖ Encryption Key: CONFIGURED")
	} else {
		fmt.Println("‚ùå Encryption Key: NOT CONFIGURED (SECURITY RISK!)")
	}

	fmt.Printf("‚è∞ JWT Expiry: %s\n", cfg.Security.JWTExpiry)
	fmt.Printf("üîÑ Refresh Token Expiry: %s\n", cfg.Security.RefreshTokenExpiry)
	
	fmt.Println()

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
	fmt.Println("üìä Monitoring Configuration:")
	fmt.Println("============================")
	
	if cfg.Monitoring.Prometheus.Enabled {
		fmt.Printf("‚úÖ Prometheus: ENABLED (Port: %d)\n", cfg.Monitoring.Prometheus.Port)
	} else {
		fmt.Println("‚ùå Prometheus: DISABLED")
	}

	if cfg.Monitoring.Jaeger.Enabled {
		fmt.Printf("‚úÖ Jaeger Tracing: ENABLED (%s)\n", cfg.Monitoring.Jaeger.Endpoint)
	} else {
		fmt.Println("‚ùå Jaeger Tracing: DISABLED")
	}

	if cfg.Monitoring.Sentry.DSN != "" && cfg.Monitoring.Sentry.DSN != "your-sentry-dsn" {
		fmt.Println("‚úÖ Sentry Error Tracking: CONFIGURED")
	} else {
		fmt.Println("‚ùå Sentry Error Tracking: NOT CONFIGURED")
	}

	fmt.Println()

	// –ü—ñ–¥—Å—É–º–æ–∫
	fmt.Println("üìã Configuration Test Summary:")
	fmt.Println("==============================")
	fmt.Printf("Environment: %s\n", cfg.Environment)
	fmt.Printf("Debug Mode: %t\n", cfg.Debug)
	fmt.Printf("Log Level: %s\n", cfg.LogLevel)
	
	// –†–∞—Ö—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
	activeServices := 0
	totalServices := 9
	
	if cfg.Features.APIGatewayEnabled { activeServices++ }
	if cfg.Features.ProducerServiceEnabled { activeServices++ }
	if cfg.Features.ConsumerServiceEnabled { activeServices++ }
	if cfg.Features.StreamsServiceEnabled { activeServices++ }
	if cfg.Features.AISearchEnabled { activeServices++ }
	if cfg.Features.AuthModuleEnabled { activeServices++ }
	if cfg.Features.Web3WalletEnabled { activeServices++ }
	if cfg.Features.DeFiServiceEnabled { activeServices++ }
	if cfg.Features.AIAgentsEnabled { activeServices++ }
	
	fmt.Printf("Active Services: %d/%d\n", activeServices, totalServices)
	
	if activeServices == totalServices {
		fmt.Println("üéâ All services are enabled and ready to go!")
	} else {
		fmt.Printf("‚ö†Ô∏è  %d services are disabled\n", totalServices-activeServices)
	}

	fmt.Println()
	fmt.Println("‚úÖ Configuration test completed successfully!")
	
	// –Ø–∫—â–æ —î –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞, –≤–∏–∫–æ–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó
	if len(os.Args) > 1 {
		switch os.Args[1] {
		case "validate":
			fmt.Println("\nüîç Running extended validation...")
			// –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
			
		case "export":
			fmt.Println("\nüì§ Exporting configuration to JSON...")
			// –¢—É—Ç –º–æ–∂–Ω–∞ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤ JSON —Ñ–∞–π–ª
			
		case "help":
			fmt.Println("\nüìñ Usage:")
			fmt.Println("  go run cmd/config-test/main.go [command]")
			fmt.Println("")
			fmt.Println("Commands:")
			fmt.Println("  validate  - Run extended validation")
			fmt.Println("  export    - Export configuration to JSON")
			fmt.Println("  help      - Show this help message")
		}
	}
}
