package telegram

import (
	"context"
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/DimaJoyti/go-coffee/web3-wallet-backend/internal/ai"
	"github.com/DimaJoyti/go-coffee/web3-wallet-backend/pkg/models"
)

// handleCallbackQuery handles callback queries from inline keyboards
func (b *Bot) handleCallbackQuery(ctx context.Context, callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	chatID := callback.Message.Chat.ID
	data := callback.Data

	b.logger.Info(fmt.Sprintf("Received callback from user %d: %s", userID, data))

	// Get user session
	session := b.getOrCreateSession(userID, chatID, callback.From.UserName)
	session.LastActivity = time.Now()

	// Answer callback query to remove loading state
	answerCallback := tgbotapi.NewCallback(callback.ID, "")
	b.api.Request(answerCallback)

	// Handle different callback types
	switch {
	case data == "create_wallet":
		b.handleCreateWalletCallback(ctx, callback, session)
	case data == "import_wallet":
		b.handleImportWalletCallback(ctx, callback, session)
	case data == "show_menu":
		b.handleShowMenuCallback(ctx, callback, session)
	case data == "coffee_recommendations":
		b.handleCoffeeRecommendationsCallback(ctx, callback, session)
	case data == "start_order":
		b.handleStartOrderCallback(ctx, callback, session)
	case data == "confirm_order":
		b.handleConfirmOrderCallback(ctx, callback, session)
	case data == "cancel_order":
		b.handleCancelOrderCallback(ctx, callback, session)
	case data == "modify_order":
		b.handleModifyOrderCallback(ctx, callback, session)
	case strings.HasPrefix(data, "pay_"):
		b.handlePaymentCallback(ctx, callback, session, data)
	case data == "confirm_payment":
		b.handlePaymentConfirmation(ctx, callback, session)
	case data == "cancel_payment":
		b.handleCancelPaymentCallback(ctx, callback, session)
	case data == "check_payment_status":
		b.handlePaymentStatusCheck(ctx, callback, session)
	case data == "copy_address":
		b.handleCopyAddressCallback(ctx, callback, session)
	case data == "show_payment_address":
		b.handleShowPaymentAddressCallback(ctx, callback, session)
	case data == "refresh_balance":
		b.handleRefreshBalanceCallback(ctx, callback, session)
	case data == "transaction_history":
		b.handleTransactionHistoryCallback(ctx, callback, session)
	case data == "change_language":
		b.handleChangeLanguageCallback(ctx, callback, session)
	case data == "notification_settings":
		b.handleNotificationSettingsCallback(ctx, callback, session)
	case data == "favorite_settings":
		b.handleFavoriteSettingsCallback(ctx, callback, session)
	case data == "security_settings":
		b.handleSecuritySettingsCallback(ctx, callback, session)
	default:
		b.handleUnknownCallback(ctx, callback, session)
	}
}

// handleCreateWalletCallback handles wallet creation
func (b *Bot) handleCreateWalletCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	// Create new wallet
	createReq := &models.CreateWalletRequest{
		UserID: fmt.Sprintf("%d", session.UserID),
		Name:   "Telegram Wallet",
		Chain:  models.ChainEthereum,
		Type:   models.WalletTypeGenerated,
	}

	wallet, err := b.walletService.CreateWallet(ctx, createReq)
	if err != nil {
		b.logger.Error(fmt.Sprintf("Failed to create wallet: %v", err))
		b.sendMessage(session.ChatID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≥–∞–º–∞–Ω—Ü—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
		return
	}

	session.WalletID = wallet.Wallet.ID
	session.State = StateIdle

	successText := fmt.Sprintf(`‚úÖ *–ì–∞–º–∞–Ω–µ—Ü—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!*

*–ê–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è:*
`+"`%s`"+`

*–í–∞–∂–ª–∏–≤–æ!* üîê
–ó–±–µ—Ä–µ–∂—ñ—Ç—å –≤–∞—à—É seed —Ñ—Ä–∞–∑—É –≤ –±–µ–∑–ø–µ—á–Ω–æ–º—É –º—ñ—Å—Ü—ñ:

`+"`%s`"+`

‚ö†Ô∏è *–£–≤–∞–≥–∞:* –ù—ñ–∫–æ–ª–∏ –Ω–µ –¥—ñ–ª—ñ—Ç—å—Å—è —Ü—ñ—î—é —Ñ—Ä–∞–∑–æ—é –∑ —ñ–Ω—à–∏–º–∏! –í–æ–Ω–∞ –¥–∞—î –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤–∞—à–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è.

–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å: /balance
‚Ä¢ –ó–∞–º–æ–≤–∏—Ç–∏ –∫–∞–≤—É: /coffee
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é: /menu`,
		wallet.Wallet.Address,
		wallet.Mnemonic,
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", "refresh_balance"),
			tgbotapi.NewInlineKeyboardButtonData("‚òïÔ∏è –ó–∞–º–æ–≤–∏—Ç–∏ –∫–∞–≤—É", "start_order"),
		),
	)

	b.sendMessageWithKeyboard(session.ChatID, successText, keyboard)
}

// handleImportWalletCallback handles wallet import
func (b *Bot) handleImportWalletCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	session.State = StateWaitingWallet

	importText := `üì• *–Ü–º–ø–æ—Ä—Ç –≥–∞–º–∞–Ω—Ü—è*

–î–ª—è —ñ–º–ø–æ—Ä—Ç—É –≥–∞–º–∞–Ω—Ü—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–¥–Ω–µ –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ:

*1. Seed —Ñ—Ä–∞–∑–∞ (12-24 —Å–ª–æ–≤–∞):*
` + "`abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about`" + `

*2. –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á:*
` + "`0x1234567890abcdef...`" + `

‚ö†Ô∏è *–ë–µ–∑–ø–µ–∫–∞:*
‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ –±–∞—á–∏—Ç—å –≤–∞—à –µ–∫—Ä–∞–Ω
‚Ä¢ –ü—ñ—Å–ª—è —ñ–º–ø–æ—Ä—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ
‚Ä¢ –ù—ñ–∫–æ–ª–∏ –Ω–µ –¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑ —ñ–Ω—à–∏–º–∏

–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É:`

	b.sendMessage(session.ChatID, importText)
}

// handleShowMenuCallback shows the coffee menu
func (b *Bot) handleShowMenuCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	menuText := `üìã *–ú–µ–Ω—é –∫–∞–≤'—è—Ä–Ω—ñ*

*‚òïÔ∏è –ï—Å–ø—Ä–µ—Å–æ –Ω–∞–ø–æ—ó:*
‚Ä¢ –ï—Å–ø—Ä–µ—Å–æ - $3.50
‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω–æ - $4.00
‚Ä¢ –õ–∞—Ç—Ç–µ - $5.50
‚Ä¢ –ö–∞–ø—É—á–∏–Ω–æ - $5.00
‚Ä¢ –ú–∞–∫—ñ–∞—Ç–æ - $5.50

*ü•õ –ú–æ–ª–æ—á–Ω—ñ –Ω–∞–ø–æ—ó:*
‚Ä¢ –§–ª–µ—Ç –í–∞–π—Ç - $5.50
‚Ä¢ –ú–æ–∫–∫–∞ - $6.00
‚Ä¢ –ö–∞—Ä–∞–º–µ–ª—å –ú–∞–∫—ñ–∞—Ç–æ - $6.50

*‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ñ –Ω–∞–ø–æ—ó:*
‚Ä¢ –ê–π—Å –õ–∞—Ç—Ç–µ - $5.50
‚Ä¢ –§—Ä–∞–ø–µ - $6.00
‚Ä¢ –ö–æ–ª–¥ –ë—Ä—é - $4.50

*üç∞ –î–æ–¥–∞—Ç–∫–∏:*
‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤–µ –º–æ–ª–æ–∫–æ - $0.50
‚Ä¢ –°–∏—Ä–æ–ø (–≤–∞–Ω—ñ–ª—å, –∫–∞—Ä–∞–º–µ–ª—å) - $0.75
‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —à–æ—Ç –µ—Å–ø—Ä–µ—Å–æ - $1.00

*–†–æ–∑–º—ñ—Ä–∏:* Small, Medium, Large (+$0.50/+$1.00)`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚òïÔ∏è –ó–∞–º–æ–≤–∏—Ç–∏", "start_order"),
			tgbotapi.NewInlineKeyboardButtonData("‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó", "coffee_recommendations"),
		),
	)

	// Edit the original message
	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, menuText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleCoffeeRecommendationsCallback provides AI-powered coffee recommendations
func (b *Bot) handleCoffeeRecommendationsCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	// Use AI to generate personalized recommendations
	prompt := `–ù–∞–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∫–∞–≤–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í—Ä–∞—Ö–æ–≤—É–π:
- –ü–æ–ø—É–ª—è—Ä–Ω—ñ –Ω–∞–ø–æ—ó
- –ß–∞—Å –¥–Ω—è
- –°–µ–∑–æ–Ω–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
- –†—ñ–∑–Ω—ñ —Å–º–∞–∫–æ–≤—ñ –ø–µ—Ä–µ–≤–∞–≥–∏

–ù–∞–¥–∞–π 3-4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–æ–º –∫–æ–∂–Ω–æ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`

	generateReq := &ai.GenerateRequest{
		UserID:      fmt.Sprintf("%d", session.UserID),
		Message:     prompt,
		Context:     "coffee_recommendations",
		Temperature: 0.8,
	}

	response, err := b.aiService.GenerateResponse(ctx, generateReq)
	if err != nil {
		b.logger.Error(fmt.Sprintf("AI recommendations failed: %v", err))
		b.sendMessage(session.ChatID, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
		return
	}

	recommendationsText := fmt.Sprintf(`‚≠ê *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó*

%s

–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?`, response.Text)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚òïÔ∏è –ó–∞–º–æ–≤–∏—Ç–∏", "start_order"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–≤–Ω–µ –º–µ–Ω—é", "show_menu"),
		),
	)

	// Edit the original message
	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, recommendationsText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleStartOrderCallback starts the coffee ordering process
func (b *Bot) handleStartOrderCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	session.State = StateOrderingCoffee

	orderText := `‚òïÔ∏è *–ü–æ—á–Ω–µ–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!*

–†–æ–∑–∫–∞–∂—ñ—Ç—å –º–µ–Ω—ñ, —è–∫—É –∫–∞–≤—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏. –Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –≤–∏–±—Ä–∞—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –º–µ–Ω—é –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–æ—Å—å –æ—Å–æ–±–ª–∏–≤–µ.

*–ü—Ä–∏–∫–ª–∞–¥–∏:*
‚Ä¢ "–•–æ—á—É –ª–∞—Ç—Ç–µ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º –º–æ–ª–æ–∫–æ–º"
‚Ä¢ "–©–æ –≤–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç–µ –¥–ª—è —Ä–∞–Ω–∫—É?"
‚Ä¢ "–ó–∞–º–æ–≤–∏—Ç–∏ –∫–∞–ø—É—á–∏–Ω–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ! ü§ñ`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é", "show_menu"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", "cancel_order"),
		),
	)

	// Edit the original message
	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, orderText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleConfirmOrderCallback confirms the order
func (b *Bot) handleConfirmOrderCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	b.confirmOrder(ctx, session)
}

// handleCancelOrderCallback cancels the order
func (b *Bot) handleCancelOrderCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	session.State = StateIdle
	delete(session.Context, "pending_order")

	cancelText := `‚ùå *–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ*

–ù–µ –ø—Ä–æ–±–ª–µ–º–∞! –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –∫–∞–≤—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.

–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚òïÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "start_order"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", "show_menu"),
		),
	)

	// Edit the original message
	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, cancelText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleModifyOrderCallback allows order modification
func (b *Bot) handleModifyOrderCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	session.State = StateOrderingCoffee

	modifyText := `‚úèÔ∏è *–ó–º—ñ–Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è*

–†–æ–∑–∫–∞–∂—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —É –≤–∞—à–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ:

‚Ä¢ –¢–∏–ø –∫–∞–≤–∏
‚Ä¢ –†–æ–∑–º—ñ—Ä
‚Ä¢ –î–æ–¥–∞—Ç–∫–∏
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ! ü§ñ`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏", "cancel_order"),
		),
	)

	// Edit the original message
	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, modifyText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handlePaymentCallback handles payment method selection
func (b *Bot) handlePaymentCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession, data string) {
	currency := strings.TrimPrefix(data, "pay_")

	// Get pending order
	pendingOrder, exists := session.Context["pending_order"]
	if !exists {
		answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
		b.api.Request(answerCallback)
		return
	}

	// Extract amount from order (simplified)
	amount := 5.50 // Default amount, in real implementation get from order
	if order, ok := pendingOrder.(*ai.ParsedCoffeeOrder); ok {
		amount = order.EstimatedPriceUSD
	}

	// Process payment request
	err := b.processPaymentRequest(ctx, session, currency, amount)
	if err != nil {
		b.logger.Error(fmt.Sprintf("Payment processing failed: %v", err))
		answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–ª–∞—Ç–µ–∂—É")
		b.api.Request(answerCallback)
		return
	}

	session.State = StateProcessingPayment
}

// handleRefreshBalanceCallback refreshes wallet balance
func (b *Bot) handleRefreshBalanceCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	if session.WalletID == "" {
		answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –≥–∞–º–∞–Ω–µ—Ü—å")
		b.api.Request(answerCallback)
		return
	}

	// Simulate balance refresh
	balanceText := `üí∞ *–ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ*

*–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:*
‚Ä¢ Bitcoin (BTC): 0.00125 (~$52.30)
‚Ä¢ Ethereum (ETH): 0.0234 (~$78.45)
‚Ä¢ USDC: 125.50
‚Ä¢ USDT: 89.20

*–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:* ~$345.45 USD

üîÑ –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: —â–æ–π–Ω–æ`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –Ü—Å—Ç–æ—Ä—ñ—è", "transaction_history"),
			tgbotapi.NewInlineKeyboardButtonData("‚òïÔ∏è –ó–∞–º–æ–≤–∏—Ç–∏ –∫–∞–≤—É", "start_order"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, balanceText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleTransactionHistoryCallback shows transaction history
func (b *Bot) handleTransactionHistoryCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	historyText := `üìä *–Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π*

*–û—Å—Ç–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:*

üü¢ *–û—Ç—Ä–∏–º–∞–Ω–æ*
‚Ä¢ +0.001 BTC
‚Ä¢ 2024-01-15 14:30
‚Ä¢ –í—ñ–¥: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa

üî¥ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ*
‚Ä¢ -25.50 USDC
‚Ä¢ 2024-01-15 12:15
‚Ä¢ –ö–∞–≤–∞ –õ–∞—Ç—Ç–µ Medium

üü¢ *–û—Ç—Ä–∏–º–∞–Ω–æ*
‚Ä¢ +0.005 ETH
‚Ä¢ 2024-01-14 18:45
‚Ä¢ –í—ñ–¥: 0x742d35Cc6634C0532925a3b8D4C0d886E

*–í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:* 15
*–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥:* $1,234.56`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∞–Ω—Å", "refresh_balance"),
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "show_wallet"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, historyText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleChangeLanguageCallback handles language change
func (b *Bot) handleChangeLanguageCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	langText := `üåê *–í–∏–±—ñ—Ä –º–æ–≤–∏ / Language Selection*

–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:
Choose interface language:`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "lang_uk"),
			tgbotapi.NewInlineKeyboardButtonData("üá∫üá∏ English", "lang_en"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "settings_menu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, langText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleNotificationSettingsCallback handles notification settings
func (b *Bot) handleNotificationSettingsCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	notifText := `üîî *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å*

*–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ
‚Ä¢ –ü–ª–∞—Ç–µ–∂—ñ: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ
‚Ä¢ –ü—Ä–æ–º–æ—Ü—ñ—ó: ‚ùå –í–∏–º–∫–Ω–µ–Ω–æ
‚Ä¢ –ù–æ–≤–∏–Ω–∏: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ

–û–±–µ—Ä—ñ—Ç—å, —â–æ –∑–º—ñ–Ω–∏—Ç–∏:`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", "toggle_order_notif"),
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü–ª–∞—Ç–µ–∂—ñ", "toggle_payment_notif"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üéÅ –ü—Ä–æ–º–æ—Ü—ñ—ó", "toggle_promo_notif"),
			tgbotapi.NewInlineKeyboardButtonData("üì∞ –ù–æ–≤–∏–Ω–∏", "toggle_news_notif"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "settings_menu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, notifText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleFavoriteSettingsCallback handles favorite settings
func (b *Bot) handleFavoriteSettingsCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	favText := `‚≠ê *–£–ª—é–±–ª–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è*

*–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ:*
‚Ä¢ –ù–∞–ø—ñ–π: –õ–∞—Ç—Ç–µ Medium
‚Ä¢ –î–æ–¥–∞—Ç–∫–∏: –î–æ–¥–∞—Ç–∫–æ–≤–µ –º–æ–ª–æ–∫–æ
‚Ä¢ –ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: 08:30, 14:00
‚Ä¢ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: USDC

*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ó–∞–º–æ–≤–ª–µ–Ω—å –ª–∞—Ç—Ç–µ: 12
‚Ä¢ –£–ª—é–±–ª–µ–Ω–∏–π —á–∞—Å: –†–∞–Ω–æ–∫
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —Å—É–º–∞: $5.75`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚òïÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ø—ñ–π", "change_fav_drink"),
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–ª–∞—Ç—É", "change_fav_payment"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "settings_menu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, favText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleSecuritySettingsCallback handles security settings
func (b *Bot) handleSecuritySettingsCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	secText := `üîí *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏*

*–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω:*
‚Ä¢ 2FA: ‚ùå –í–∏–º–∫–Ω–µ–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ —É–≤—ñ–º–∫–Ω—É—Ç–∏)
‚Ä¢ –ê–≤—Ç–æ–±–ª–æ–∫—É–≤–∞–Ω–Ω—è: ‚úÖ 30 —Ö–≤–∏–ª–∏–Ω
‚Ä¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ
‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ‚úÖ –•–º–∞—Ä–Ω–µ

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:*
‚Ä¢ –£–≤—ñ–º–∫–Ω—ñ—Ç—å 2FA –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –±–µ–∑–ø–µ–∫–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ –ø–∞—Ä–æ–ª—å
‚Ä¢ –ù–µ –¥—ñ–ª—ñ—Ç—å—Å—è seed —Ñ—Ä–∞–∑–æ—é`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîê –£–≤—ñ–º–∫–Ω—É—Ç–∏ 2FA", "enable_2fa"),
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ê–≤—Ç–æ–±–ª–æ–∫—É–≤–∞–Ω–Ω—è", "auto_lock_settings"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üíæ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è", "backup_settings"),
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "settings_menu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, secText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleUnknownCallback handles unknown callback queries
func (b *Bot) handleUnknownCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	b.logger.Warn(fmt.Sprintf("Unknown callback data: %s", callback.Data))

	// Answer with error message
	answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
	b.api.Request(answerCallback)
}

// handleCancelPaymentCallback handles payment cancellation
func (b *Bot) handleCancelPaymentCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	session.State = StateIdle
	delete(session.Context, "payment_request")
	delete(session.Context, "payment_info")

	cancelText := `‚ùå *–ü–ª–∞—Ç—ñ–∂ —Å–∫–∞—Å–æ–≤–∞–Ω–æ*

–ù–µ –ø—Ä–æ–±–ª–µ–º–∞! –í–∏ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–∑–Ω—ñ—à–µ.

–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚òïÔ∏è –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "start_order"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", "show_menu"),
		),
	)

	editMsg := tgbotapi.NewEditMessageText(session.ChatID, callback.Message.MessageID, cancelText)
	editMsg.ParseMode = tgbotapi.ModeMarkdown
	editMsg.ReplyMarkup = &keyboard
	b.api.Send(editMsg)
}

// handleCopyAddressCallback handles address copying
func (b *Bot) handleCopyAddressCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	paymentInfo, exists := session.Context["payment_info"].(*CryptoPaymentInfo)
	if !exists {
		answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "‚ùå –ü–ª–∞—Ç—ñ–∂–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
		b.api.Request(answerCallback)
		return
	}

	// Show address for easy copying
	addressText := fmt.Sprintf(`üìã *–ê–¥—Ä–µ—Å–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è*

*%s –∞–¥—Ä–µ—Å–∞:*
`+"`%s`"+`

–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∞–¥—Ä–µ—Å—É —â–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —ó—ó.

*–í–∞–∂–ª–∏–≤–æ:* –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–æ—á–Ω–æ %s %s –Ω–∞ —Ü—é –∞–¥—Ä–µ—Å—É.`,
		paymentInfo.Currency,
		paymentInfo.Address,
		paymentInfo.TotalRequired,
		paymentInfo.Currency,
	)

	answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "üìã –ê–¥—Ä–µ—Å–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ –Ω–∏–∂—á–µ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è")
	b.api.Request(answerCallback)

	b.sendMessage(session.ChatID, addressText)
}

// handleShowPaymentAddressCallback shows payment address again
func (b *Bot) handleShowPaymentAddressCallback(ctx context.Context, callback *tgbotapi.CallbackQuery, session *UserSession) {
	paymentInfo, exists := session.Context["payment_info"].(*CryptoPaymentInfo)
	if !exists {
		answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "‚ùå –ü–ª–∞—Ç—ñ–∂–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
		b.api.Request(answerCallback)
		return
	}

	paymentReq, exists := session.Context["payment_request"].(*PaymentRequest)
	if !exists {
		answerCallback := tgbotapi.NewCallbackWithAlert(callback.ID, "‚ùå –ü–ª–∞—Ç—ñ–∂–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
		b.api.Request(answerCallback)
		return
	}

	// Resend payment instructions
	b.sendPaymentInstructions(session.ChatID, paymentInfo, paymentReq)

	answerCallback := tgbotapi.NewCallback(callback.ID, "üí≥ –ü–ª–∞—Ç—ñ–∂–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ")
	b.api.Request(answerCallback)
}
