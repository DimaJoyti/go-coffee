// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: contract.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SmartContractService_DeployContract_FullMethodName          = "/contract.SmartContractService/DeployContract"
	SmartContractService_ImportContract_FullMethodName          = "/contract.SmartContractService/ImportContract"
	SmartContractService_GetContract_FullMethodName             = "/contract.SmartContractService/GetContract"
	SmartContractService_GetContractByAddress_FullMethodName    = "/contract.SmartContractService/GetContractByAddress"
	SmartContractService_ListContracts_FullMethodName           = "/contract.SmartContractService/ListContracts"
	SmartContractService_CallContract_FullMethodName            = "/contract.SmartContractService/CallContract"
	SmartContractService_SendContractTransaction_FullMethodName = "/contract.SmartContractService/SendContractTransaction"
	SmartContractService_GetContractEvents_FullMethodName       = "/contract.SmartContractService/GetContractEvents"
	SmartContractService_GetTokenInfo_FullMethodName            = "/contract.SmartContractService/GetTokenInfo"
)

// SmartContractServiceClient is the client API for SmartContractService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SmartContractService provides smart contract operations
type SmartContractServiceClient interface {
	// DeployContract deploys a new smart contract
	DeployContract(ctx context.Context, in *DeployContractRequest, opts ...grpc.CallOption) (*DeployContractResponse, error)
	// ImportContract imports an existing contract
	ImportContract(ctx context.Context, in *ImportContractRequest, opts ...grpc.CallOption) (*ImportContractResponse, error)
	// GetContract retrieves a contract by ID
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error)
	// GetContractByAddress retrieves a contract by address
	GetContractByAddress(ctx context.Context, in *GetContractByAddressRequest, opts ...grpc.CallOption) (*GetContractByAddressResponse, error)
	// ListContracts lists all contracts for a user
	ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error)
	// CallContract calls a contract method (read-only)
	CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*CallContractResponse, error)
	// SendContractTransaction sends a contract transaction (state-changing)
	SendContractTransaction(ctx context.Context, in *SendContractTransactionRequest, opts ...grpc.CallOption) (*SendContractTransactionResponse, error)
	// GetContractEvents retrieves events emitted by a contract
	GetContractEvents(ctx context.Context, in *GetContractEventsRequest, opts ...grpc.CallOption) (*GetContractEventsResponse, error)
	// GetTokenInfo retrieves information about a token contract
	GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error)
}

type smartContractServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartContractServiceClient(cc grpc.ClientConnInterface) SmartContractServiceClient {
	return &smartContractServiceClient{cc}
}

func (c *smartContractServiceClient) DeployContract(ctx context.Context, in *DeployContractRequest, opts ...grpc.CallOption) (*DeployContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployContractResponse)
	err := c.cc.Invoke(ctx, SmartContractService_DeployContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ImportContract(ctx context.Context, in *ImportContractRequest, opts ...grpc.CallOption) (*ImportContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportContractResponse)
	err := c.cc.Invoke(ctx, SmartContractService_ImportContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*GetContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractResponse)
	err := c.cc.Invoke(ctx, SmartContractService_GetContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) GetContractByAddress(ctx context.Context, in *GetContractByAddressRequest, opts ...grpc.CallOption) (*GetContractByAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractByAddressResponse)
	err := c.cc.Invoke(ctx, SmartContractService_GetContractByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContractsResponse)
	err := c.cc.Invoke(ctx, SmartContractService_ListContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*CallContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallContractResponse)
	err := c.cc.Invoke(ctx, SmartContractService_CallContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) SendContractTransaction(ctx context.Context, in *SendContractTransactionRequest, opts ...grpc.CallOption) (*SendContractTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendContractTransactionResponse)
	err := c.cc.Invoke(ctx, SmartContractService_SendContractTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) GetContractEvents(ctx context.Context, in *GetContractEventsRequest, opts ...grpc.CallOption) (*GetContractEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContractEventsResponse)
	err := c.cc.Invoke(ctx, SmartContractService_GetContractEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartContractServiceClient) GetTokenInfo(ctx context.Context, in *GetTokenInfoRequest, opts ...grpc.CallOption) (*GetTokenInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenInfoResponse)
	err := c.cc.Invoke(ctx, SmartContractService_GetTokenInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartContractServiceServer is the server API for SmartContractService service.
// All implementations must embed UnimplementedSmartContractServiceServer
// for forward compatibility.
//
// SmartContractService provides smart contract operations
type SmartContractServiceServer interface {
	// DeployContract deploys a new smart contract
	DeployContract(context.Context, *DeployContractRequest) (*DeployContractResponse, error)
	// ImportContract imports an existing contract
	ImportContract(context.Context, *ImportContractRequest) (*ImportContractResponse, error)
	// GetContract retrieves a contract by ID
	GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error)
	// GetContractByAddress retrieves a contract by address
	GetContractByAddress(context.Context, *GetContractByAddressRequest) (*GetContractByAddressResponse, error)
	// ListContracts lists all contracts for a user
	ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error)
	// CallContract calls a contract method (read-only)
	CallContract(context.Context, *CallContractRequest) (*CallContractResponse, error)
	// SendContractTransaction sends a contract transaction (state-changing)
	SendContractTransaction(context.Context, *SendContractTransactionRequest) (*SendContractTransactionResponse, error)
	// GetContractEvents retrieves events emitted by a contract
	GetContractEvents(context.Context, *GetContractEventsRequest) (*GetContractEventsResponse, error)
	// GetTokenInfo retrieves information about a token contract
	GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error)
	mustEmbedUnimplementedSmartContractServiceServer()
}

// UnimplementedSmartContractServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmartContractServiceServer struct{}

func (UnimplementedSmartContractServiceServer) DeployContract(context.Context, *DeployContractRequest) (*DeployContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployContract not implemented")
}
func (UnimplementedSmartContractServiceServer) ImportContract(context.Context, *ImportContractRequest) (*ImportContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportContract not implemented")
}
func (UnimplementedSmartContractServiceServer) GetContract(context.Context, *GetContractRequest) (*GetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedSmartContractServiceServer) GetContractByAddress(context.Context, *GetContractByAddressRequest) (*GetContractByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractByAddress not implemented")
}
func (UnimplementedSmartContractServiceServer) ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContracts not implemented")
}
func (UnimplementedSmartContractServiceServer) CallContract(context.Context, *CallContractRequest) (*CallContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallContract not implemented")
}
func (UnimplementedSmartContractServiceServer) SendContractTransaction(context.Context, *SendContractTransactionRequest) (*SendContractTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContractTransaction not implemented")
}
func (UnimplementedSmartContractServiceServer) GetContractEvents(context.Context, *GetContractEventsRequest) (*GetContractEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractEvents not implemented")
}
func (UnimplementedSmartContractServiceServer) GetTokenInfo(context.Context, *GetTokenInfoRequest) (*GetTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (UnimplementedSmartContractServiceServer) mustEmbedUnimplementedSmartContractServiceServer() {}
func (UnimplementedSmartContractServiceServer) testEmbeddedByValue()                              {}

// UnsafeSmartContractServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartContractServiceServer will
// result in compilation errors.
type UnsafeSmartContractServiceServer interface {
	mustEmbedUnimplementedSmartContractServiceServer()
}

func RegisterSmartContractServiceServer(s grpc.ServiceRegistrar, srv SmartContractServiceServer) {
	// If the following call pancis, it indicates UnimplementedSmartContractServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SmartContractService_ServiceDesc, srv)
}

func _SmartContractService_DeployContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).DeployContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_DeployContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).DeployContract(ctx, req.(*DeployContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ImportContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ImportContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ImportContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ImportContract(ctx, req.(*ImportContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetContractByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetContractByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetContractByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetContractByAddress(ctx, req.(*GetContractByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_ListContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).ListContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_ListContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).ListContracts(ctx, req.(*ListContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_CallContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).CallContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_CallContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).CallContract(ctx, req.(*CallContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_SendContractTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContractTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).SendContractTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_SendContractTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).SendContractTransaction(ctx, req.(*SendContractTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetContractEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetContractEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetContractEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetContractEvents(ctx, req.(*GetContractEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmartContractService_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartContractServiceServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SmartContractService_GetTokenInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartContractServiceServer).GetTokenInfo(ctx, req.(*GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SmartContractService_ServiceDesc is the grpc.ServiceDesc for SmartContractService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmartContractService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contract.SmartContractService",
	HandlerType: (*SmartContractServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployContract",
			Handler:    _SmartContractService_DeployContract_Handler,
		},
		{
			MethodName: "ImportContract",
			Handler:    _SmartContractService_ImportContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _SmartContractService_GetContract_Handler,
		},
		{
			MethodName: "GetContractByAddress",
			Handler:    _SmartContractService_GetContractByAddress_Handler,
		},
		{
			MethodName: "ListContracts",
			Handler:    _SmartContractService_ListContracts_Handler,
		},
		{
			MethodName: "CallContract",
			Handler:    _SmartContractService_CallContract_Handler,
		},
		{
			MethodName: "SendContractTransaction",
			Handler:    _SmartContractService_SendContractTransaction_Handler,
		},
		{
			MethodName: "GetContractEvents",
			Handler:    _SmartContractService_GetContractEvents_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _SmartContractService_GetTokenInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}
