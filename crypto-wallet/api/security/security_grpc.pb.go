// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: security.proto

package security

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecurityService_GenerateKeyPair_FullMethodName      = "/security.SecurityService/GenerateKeyPair"
	SecurityService_EncryptPrivateKey_FullMethodName    = "/security.SecurityService/EncryptPrivateKey"
	SecurityService_DecryptPrivateKey_FullMethodName    = "/security.SecurityService/DecryptPrivateKey"
	SecurityService_GenerateJWT_FullMethodName          = "/security.SecurityService/GenerateJWT"
	SecurityService_VerifyJWT_FullMethodName            = "/security.SecurityService/VerifyJWT"
	SecurityService_GenerateMnemonic_FullMethodName     = "/security.SecurityService/GenerateMnemonic"
	SecurityService_ValidateMnemonic_FullMethodName     = "/security.SecurityService/ValidateMnemonic"
	SecurityService_MnemonicToPrivateKey_FullMethodName = "/security.SecurityService/MnemonicToPrivateKey"
)

// SecurityServiceClient is the client API for SecurityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecurityService provides security operations
type SecurityServiceClient interface {
	// GenerateKeyPair generates a new key pair
	GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error)
	// EncryptPrivateKey encrypts a private key
	EncryptPrivateKey(ctx context.Context, in *EncryptPrivateKeyRequest, opts ...grpc.CallOption) (*EncryptPrivateKeyResponse, error)
	// DecryptPrivateKey decrypts a private key
	DecryptPrivateKey(ctx context.Context, in *DecryptPrivateKeyRequest, opts ...grpc.CallOption) (*DecryptPrivateKeyResponse, error)
	// GenerateJWT generates a JWT token
	GenerateJWT(ctx context.Context, in *GenerateJWTRequest, opts ...grpc.CallOption) (*GenerateJWTResponse, error)
	// VerifyJWT verifies a JWT token
	VerifyJWT(ctx context.Context, in *VerifyJWTRequest, opts ...grpc.CallOption) (*VerifyJWTResponse, error)
	// GenerateMnemonic generates a mnemonic phrase
	GenerateMnemonic(ctx context.Context, in *GenerateMnemonicRequest, opts ...grpc.CallOption) (*GenerateMnemonicResponse, error)
	// ValidateMnemonic validates a mnemonic phrase
	ValidateMnemonic(ctx context.Context, in *ValidateMnemonicRequest, opts ...grpc.CallOption) (*ValidateMnemonicResponse, error)
	// MnemonicToPrivateKey converts a mnemonic to a private key
	MnemonicToPrivateKey(ctx context.Context, in *MnemonicToPrivateKeyRequest, opts ...grpc.CallOption) (*MnemonicToPrivateKeyResponse, error)
}

type securityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityServiceClient(cc grpc.ClientConnInterface) SecurityServiceClient {
	return &securityServiceClient{cc}
}

func (c *securityServiceClient) GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateKeyPairResponse)
	err := c.cc.Invoke(ctx, SecurityService_GenerateKeyPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) EncryptPrivateKey(ctx context.Context, in *EncryptPrivateKeyRequest, opts ...grpc.CallOption) (*EncryptPrivateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncryptPrivateKeyResponse)
	err := c.cc.Invoke(ctx, SecurityService_EncryptPrivateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) DecryptPrivateKey(ctx context.Context, in *DecryptPrivateKeyRequest, opts ...grpc.CallOption) (*DecryptPrivateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecryptPrivateKeyResponse)
	err := c.cc.Invoke(ctx, SecurityService_DecryptPrivateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GenerateJWT(ctx context.Context, in *GenerateJWTRequest, opts ...grpc.CallOption) (*GenerateJWTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateJWTResponse)
	err := c.cc.Invoke(ctx, SecurityService_GenerateJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) VerifyJWT(ctx context.Context, in *VerifyJWTRequest, opts ...grpc.CallOption) (*VerifyJWTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyJWTResponse)
	err := c.cc.Invoke(ctx, SecurityService_VerifyJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GenerateMnemonic(ctx context.Context, in *GenerateMnemonicRequest, opts ...grpc.CallOption) (*GenerateMnemonicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateMnemonicResponse)
	err := c.cc.Invoke(ctx, SecurityService_GenerateMnemonic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ValidateMnemonic(ctx context.Context, in *ValidateMnemonicRequest, opts ...grpc.CallOption) (*ValidateMnemonicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateMnemonicResponse)
	err := c.cc.Invoke(ctx, SecurityService_ValidateMnemonic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) MnemonicToPrivateKey(ctx context.Context, in *MnemonicToPrivateKeyRequest, opts ...grpc.CallOption) (*MnemonicToPrivateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MnemonicToPrivateKeyResponse)
	err := c.cc.Invoke(ctx, SecurityService_MnemonicToPrivateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityServiceServer is the server API for SecurityService service.
// All implementations must embed UnimplementedSecurityServiceServer
// for forward compatibility.
//
// SecurityService provides security operations
type SecurityServiceServer interface {
	// GenerateKeyPair generates a new key pair
	GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error)
	// EncryptPrivateKey encrypts a private key
	EncryptPrivateKey(context.Context, *EncryptPrivateKeyRequest) (*EncryptPrivateKeyResponse, error)
	// DecryptPrivateKey decrypts a private key
	DecryptPrivateKey(context.Context, *DecryptPrivateKeyRequest) (*DecryptPrivateKeyResponse, error)
	// GenerateJWT generates a JWT token
	GenerateJWT(context.Context, *GenerateJWTRequest) (*GenerateJWTResponse, error)
	// VerifyJWT verifies a JWT token
	VerifyJWT(context.Context, *VerifyJWTRequest) (*VerifyJWTResponse, error)
	// GenerateMnemonic generates a mnemonic phrase
	GenerateMnemonic(context.Context, *GenerateMnemonicRequest) (*GenerateMnemonicResponse, error)
	// ValidateMnemonic validates a mnemonic phrase
	ValidateMnemonic(context.Context, *ValidateMnemonicRequest) (*ValidateMnemonicResponse, error)
	// MnemonicToPrivateKey converts a mnemonic to a private key
	MnemonicToPrivateKey(context.Context, *MnemonicToPrivateKeyRequest) (*MnemonicToPrivateKeyResponse, error)
	mustEmbedUnimplementedSecurityServiceServer()
}

// UnimplementedSecurityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityServiceServer struct{}

func (UnimplementedSecurityServiceServer) GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeyPair not implemented")
}
func (UnimplementedSecurityServiceServer) EncryptPrivateKey(context.Context, *EncryptPrivateKeyRequest) (*EncryptPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptPrivateKey not implemented")
}
func (UnimplementedSecurityServiceServer) DecryptPrivateKey(context.Context, *DecryptPrivateKeyRequest) (*DecryptPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptPrivateKey not implemented")
}
func (UnimplementedSecurityServiceServer) GenerateJWT(context.Context, *GenerateJWTRequest) (*GenerateJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateJWT not implemented")
}
func (UnimplementedSecurityServiceServer) VerifyJWT(context.Context, *VerifyJWTRequest) (*VerifyJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyJWT not implemented")
}
func (UnimplementedSecurityServiceServer) GenerateMnemonic(context.Context, *GenerateMnemonicRequest) (*GenerateMnemonicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMnemonic not implemented")
}
func (UnimplementedSecurityServiceServer) ValidateMnemonic(context.Context, *ValidateMnemonicRequest) (*ValidateMnemonicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMnemonic not implemented")
}
func (UnimplementedSecurityServiceServer) MnemonicToPrivateKey(context.Context, *MnemonicToPrivateKeyRequest) (*MnemonicToPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MnemonicToPrivateKey not implemented")
}
func (UnimplementedSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {}
func (UnimplementedSecurityServiceServer) testEmbeddedByValue()                         {}

// UnsafeSecurityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityServiceServer will
// result in compilation errors.
type UnsafeSecurityServiceServer interface {
	mustEmbedUnimplementedSecurityServiceServer()
}

func RegisterSecurityServiceServer(s grpc.ServiceRegistrar, srv SecurityServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecurityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecurityService_ServiceDesc, srv)
}

func _SecurityService_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_GenerateKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GenerateKeyPair(ctx, req.(*GenerateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_EncryptPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).EncryptPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_EncryptPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).EncryptPrivateKey(ctx, req.(*EncryptPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_DecryptPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).DecryptPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_DecryptPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).DecryptPrivateKey(ctx, req.(*DecryptPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GenerateJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GenerateJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_GenerateJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GenerateJWT(ctx, req.(*GenerateJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_VerifyJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).VerifyJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_VerifyJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).VerifyJWT(ctx, req.(*VerifyJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GenerateMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMnemonicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GenerateMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_GenerateMnemonic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GenerateMnemonic(ctx, req.(*GenerateMnemonicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ValidateMnemonic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateMnemonicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ValidateMnemonic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ValidateMnemonic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ValidateMnemonic(ctx, req.(*ValidateMnemonicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_MnemonicToPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MnemonicToPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).MnemonicToPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_MnemonicToPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).MnemonicToPrivateKey(ctx, req.(*MnemonicToPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityService_ServiceDesc is the grpc.ServiceDesc for SecurityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "security.SecurityService",
	HandlerType: (*SecurityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKeyPair",
			Handler:    _SecurityService_GenerateKeyPair_Handler,
		},
		{
			MethodName: "EncryptPrivateKey",
			Handler:    _SecurityService_EncryptPrivateKey_Handler,
		},
		{
			MethodName: "DecryptPrivateKey",
			Handler:    _SecurityService_DecryptPrivateKey_Handler,
		},
		{
			MethodName: "GenerateJWT",
			Handler:    _SecurityService_GenerateJWT_Handler,
		},
		{
			MethodName: "VerifyJWT",
			Handler:    _SecurityService_VerifyJWT_Handler,
		},
		{
			MethodName: "GenerateMnemonic",
			Handler:    _SecurityService_GenerateMnemonic_Handler,
		},
		{
			MethodName: "ValidateMnemonic",
			Handler:    _SecurityService_ValidateMnemonic_Handler,
		},
		{
			MethodName: "MnemonicToPrivateKey",
			Handler:    _SecurityService_MnemonicToPrivateKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security.proto",
}
