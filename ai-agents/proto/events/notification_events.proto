syntax = "proto3";

package events;

option go_package = "go-coffee-ai-agents/proto/events";

import "google/protobuf/timestamp.proto";

// NotificationSentEvent represents a notification that was sent
message NotificationSentEvent {
  string notification_id = 1;
  NotificationType type = 2;
  string recipient = 3;
  string channel = 4;
  string subject = 5;
  string message = 6;
  NotificationStatus status = 7;
  string sent_by = 8;
  google.protobuf.Timestamp sent_at = 9;
  map<string, string> metadata = 10;
  string event_type = 11;
  string version = 12;
  string correlation_id = 13;
  string trace_id = 14;
}

// NotificationFailedEvent represents a failed notification
message NotificationFailedEvent {
  string notification_id = 1;
  NotificationType type = 2;
  string recipient = 3;
  string channel = 4;
  string subject = 5;
  string message = 6;
  string error_message = 7;
  string error_code = 8;
  int32 retry_count = 9;
  google.protobuf.Timestamp failed_at = 10;
  string event_type = 11;
  string version = 12;
  string correlation_id = 13;
  string trace_id = 14;
}

// SlackMessageSentEvent represents a Slack message that was sent
message SlackMessageSentEvent {
  string message_id = 1;
  string channel = 2;
  string text = 3;
  string user = 4;
  google.protobuf.Timestamp timestamp = 5;
  repeated SlackAttachment attachments = 6;
  string thread_ts = 7;
  string event_type = 8;
  string version = 9;
  string correlation_id = 10;
  string trace_id = 11;
}

// EmailSentEvent represents an email that was sent
message EmailSentEvent {
  string email_id = 1;
  string from_address = 2;
  repeated string to_addresses = 3;
  repeated string cc_addresses = 4;
  repeated string bcc_addresses = 5;
  string subject = 6;
  string body_text = 7;
  string body_html = 8;
  repeated EmailAttachment attachments = 9;
  google.protobuf.Timestamp sent_at = 10;
  string smtp_server = 11;
  string event_type = 12;
  string version = 13;
  string correlation_id = 14;
  string trace_id = 15;
}

// WebhookSentEvent represents a webhook that was sent
message WebhookSentEvent {
  string webhook_id = 1;
  string url = 2;
  string method = 3;
  map<string, string> headers = 4;
  string payload = 5;
  int32 response_status = 6;
  string response_body = 7;
  google.protobuf.Timestamp sent_at = 8;
  int64 response_time_ms = 9;
  string event_type = 10;
  string version = 11;
  string correlation_id = 12;
  string trace_id = 13;
}

// AlertTriggeredEvent represents an alert that was triggered
message AlertTriggeredEvent {
  string alert_id = 1;
  string alert_name = 2;
  AlertSeverity severity = 3;
  string description = 4;
  string source = 5;
  map<string, string> labels = 6;
  map<string, string> annotations = 7;
  google.protobuf.Timestamp triggered_at = 8;
  string event_type = 9;
  string version = 10;
  string correlation_id = 11;
  string trace_id = 12;
}

// AlertResolvedEvent represents an alert that was resolved
message AlertResolvedEvent {
  string alert_id = 1;
  string alert_name = 2;
  AlertSeverity severity = 3;
  string resolved_by = 4;
  string resolution_notes = 5;
  google.protobuf.Timestamp resolved_at = 6;
  int64 duration_seconds = 7;
  string event_type = 8;
  string version = 9;
  string correlation_id = 10;
  string trace_id = 11;
}

// Supporting message types

// SlackAttachment represents a Slack message attachment
message SlackAttachment {
  string fallback = 1;
  string color = 2;
  string pretext = 3;
  string author_name = 4;
  string author_link = 5;
  string author_icon = 6;
  string title = 7;
  string title_link = 8;
  string text = 9;
  repeated SlackField fields = 10;
  string image_url = 11;
  string thumb_url = 12;
  string footer = 13;
  string footer_icon = 14;
  google.protobuf.Timestamp ts = 15;
}

// SlackField represents a field in a Slack attachment
message SlackField {
  string title = 1;
  string value = 2;
  bool short = 3;
}

// EmailAttachment represents an email attachment
message EmailAttachment {
  string filename = 1;
  string content_type = 2;
  bytes content = 3;
  string content_id = 4;
  bool inline = 5;
}

// Enums

// NotificationType represents the type of notification
enum NotificationType {
  NOTIFICATION_TYPE_UNSPECIFIED = 0;
  NOTIFICATION_TYPE_INFO = 1;
  NOTIFICATION_TYPE_WARNING = 2;
  NOTIFICATION_TYPE_ERROR = 3;
  NOTIFICATION_TYPE_SUCCESS = 4;
  NOTIFICATION_TYPE_ALERT = 5;
}

// NotificationStatus represents the status of a notification
enum NotificationStatus {
  NOTIFICATION_STATUS_UNSPECIFIED = 0;
  NOTIFICATION_STATUS_PENDING = 1;
  NOTIFICATION_STATUS_SENT = 2;
  NOTIFICATION_STATUS_DELIVERED = 3;
  NOTIFICATION_STATUS_FAILED = 4;
  NOTIFICATION_STATUS_RETRYING = 5;
}

// AlertSeverity represents the severity of an alert
enum AlertSeverity {
  ALERT_SEVERITY_UNSPECIFIED = 0;
  ALERT_SEVERITY_INFO = 1;
  ALERT_SEVERITY_WARNING = 2;
  ALERT_SEVERITY_CRITICAL = 3;
  ALERT_SEVERITY_FATAL = 4;
}
