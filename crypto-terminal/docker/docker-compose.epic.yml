# Epic Crypto Terminal - Complete Stack Docker Compose
version: '3.8'

services:
  # Go Backend API
  crypto-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: epic-crypto-api
    ports:
      - "8090:8090"
    environment:
      - PORT=8090
      - GIN_MODE=release
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=crypto_user
      - DB_PASSWORD=crypto_password
      - DB_NAME=crypto_terminal
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - API_RATE_LIMIT=1000
      - CORS_ORIGINS=http://localhost:3001,https://your-domain.com
    depends_on:
      - postgres
      - redis
    networks:
      - epic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Dashboard
  crypto-dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: epic-crypto-dashboard
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8090
      - NEXT_PUBLIC_WS_URL=ws://localhost:8090
      - NEXT_PUBLIC_TRADINGVIEW_API_KEY=${TRADINGVIEW_API_KEY}
      - NEXT_PUBLIC_APP_NAME=Epic Crypto Terminal
      - NEXT_PUBLIC_APP_VERSION=2.0.0
    depends_on:
      - crypto-api
    networks:
      - epic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: epic-crypto-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=crypto_terminal
      - POSTGRES_USER=crypto_user
      - POSTGRES_PASSWORD=crypto_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - epic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_user -d crypto_terminal"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: epic-crypto-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - epic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: epic-crypto-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - crypto-api
      - crypto-dashboard
    networks:
      - epic-network
    restart: unless-stopped
    profiles:
      - production

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: epic-crypto-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - epic-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: epic-crypto-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - epic-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  epic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
